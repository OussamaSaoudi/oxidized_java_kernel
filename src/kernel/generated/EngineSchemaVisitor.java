// Generated by jextract

package kernel.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EngineSchemaVisitor {
 *     void *data;
 *     uintptr_t (*make_field_list)(void *, uintptr_t);
 *     void (*visit_struct)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t);
 *     void (*visit_array)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t);
 *     void (*visit_map)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t);
 *     void (*visit_decimal)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uint8_t, uint8_t);
 *     void (*visit_string)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_long)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_integer)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_short)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_byte)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_float)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_double)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_boolean)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_binary)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_date)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_timestamp)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 *     void (*visit_timestamp_ntz)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *);
 * }
 * }
 */
public class EngineSchemaVisitor {

    EngineSchemaVisitor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        delta_kernel_ffi_h.C_POINTER.withName("data"),
        delta_kernel_ffi_h.C_POINTER.withName("make_field_list"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_struct"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_array"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_map"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_decimal"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_string"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_long"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_integer"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_short"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_byte"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_float"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_double"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_boolean"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_binary"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_date"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_timestamp"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_timestamp_ntz")
    ).withName("EngineSchemaVisitor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static class make_field_list {

        make_field_list() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(make_field_list.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(make_field_list.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout make_field_list$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("make_field_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static final AddressLayout make_field_list$layout() {
        return make_field_list$LAYOUT;
    }

    private static final long make_field_list$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static final long make_field_list$offset() {
        return make_field_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static MemorySegment make_field_list(MemorySegment struct) {
        return struct.get(make_field_list$LAYOUT, make_field_list$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static void make_field_list(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(make_field_list$LAYOUT, make_field_list$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_struct)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static class visit_struct {

        visit_struct() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4, long _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_struct.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_struct.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4, long _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_struct$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_struct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_struct)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static final AddressLayout visit_struct$layout() {
        return visit_struct$LAYOUT;
    }

    private static final long visit_struct$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_struct)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static final long visit_struct$offset() {
        return visit_struct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_struct)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static MemorySegment visit_struct(MemorySegment struct) {
        return struct.get(visit_struct$LAYOUT, visit_struct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_struct)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static void visit_struct(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_struct$LAYOUT, visit_struct$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_array)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static class visit_array {

        visit_array() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4, long _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_array.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_array.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4, long _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_array"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_array)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static final AddressLayout visit_array$layout() {
        return visit_array$LAYOUT;
    }

    private static final long visit_array$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_array)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static final long visit_array$offset() {
        return visit_array$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_array)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static MemorySegment visit_array(MemorySegment struct) {
        return struct.get(visit_array$LAYOUT, visit_array$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_array)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static void visit_array(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_array$LAYOUT, visit_array$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_map)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static class visit_map {

        visit_map() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4, long _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_map.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_map.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4, long _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_map$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_map"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_map)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static final AddressLayout visit_map$layout() {
        return visit_map$LAYOUT;
    }

    private static final long visit_map$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_map)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static final long visit_map$offset() {
        return visit_map$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_map)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static MemorySegment visit_map(MemorySegment struct) {
        return struct.get(visit_map$LAYOUT, visit_map$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_map)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uintptr_t)
     * }
     */
    public static void visit_map(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_map$LAYOUT, visit_map$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_decimal)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uint8_t, uint8_t)
     * }
     */
    public static class visit_decimal {

        visit_decimal() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4, byte _x5, byte _x6);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_CHAR,
            delta_kernel_ffi_h.C_CHAR
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_decimal.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_decimal.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4, byte _x5, byte _x6) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5, _x6);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_decimal$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_decimal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_decimal)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uint8_t, uint8_t)
     * }
     */
    public static final AddressLayout visit_decimal$layout() {
        return visit_decimal$LAYOUT;
    }

    private static final long visit_decimal$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_decimal)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uint8_t, uint8_t)
     * }
     */
    public static final long visit_decimal$offset() {
        return visit_decimal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_decimal)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uint8_t, uint8_t)
     * }
     */
    public static MemorySegment visit_decimal(MemorySegment struct) {
        return struct.get(visit_decimal$LAYOUT, visit_decimal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_decimal)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *, uint8_t, uint8_t)
     * }
     */
    public static void visit_decimal(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_decimal$LAYOUT, visit_decimal$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_string)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_string {

        visit_string() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_string.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_string.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_string$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_string"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_string)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_string$layout() {
        return visit_string$LAYOUT;
    }

    private static final long visit_string$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_string)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_string$offset() {
        return visit_string$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_string)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_string(MemorySegment struct) {
        return struct.get(visit_string$LAYOUT, visit_string$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_string)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_string(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_string$LAYOUT, visit_string$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_long)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_long {

        visit_long() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_long.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_long.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_long$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_long"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_long)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_long$layout() {
        return visit_long$LAYOUT;
    }

    private static final long visit_long$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_long)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_long$offset() {
        return visit_long$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_long)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_long(MemorySegment struct) {
        return struct.get(visit_long$LAYOUT, visit_long$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_long)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_long(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_long$LAYOUT, visit_long$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_integer)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_integer {

        visit_integer() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_integer.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_integer.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_integer$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_integer"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_integer)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_integer$layout() {
        return visit_integer$LAYOUT;
    }

    private static final long visit_integer$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_integer)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_integer$offset() {
        return visit_integer$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_integer)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_integer(MemorySegment struct) {
        return struct.get(visit_integer$LAYOUT, visit_integer$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_integer)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_integer(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_integer$LAYOUT, visit_integer$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_short)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_short {

        visit_short() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_short.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_short.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_short$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_short"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_short)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_short$layout() {
        return visit_short$LAYOUT;
    }

    private static final long visit_short$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_short)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_short$offset() {
        return visit_short$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_short)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_short(MemorySegment struct) {
        return struct.get(visit_short$LAYOUT, visit_short$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_short)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_short(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_short$LAYOUT, visit_short$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_byte)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_byte {

        visit_byte() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_byte.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_byte.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_byte$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_byte"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_byte)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_byte$layout() {
        return visit_byte$LAYOUT;
    }

    private static final long visit_byte$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_byte)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_byte$offset() {
        return visit_byte$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_byte)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_byte(MemorySegment struct) {
        return struct.get(visit_byte$LAYOUT, visit_byte$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_byte)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_byte(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_byte$LAYOUT, visit_byte$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_float)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_float {

        visit_float() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_float.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_float.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_float$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_float)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_float$layout() {
        return visit_float$LAYOUT;
    }

    private static final long visit_float$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_float)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_float$offset() {
        return visit_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_float)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_float(MemorySegment struct) {
        return struct.get(visit_float$LAYOUT, visit_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_float)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_float(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_float$LAYOUT, visit_float$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_double)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_double {

        visit_double() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_double.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_double.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_double$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_double"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_double)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_double$layout() {
        return visit_double$LAYOUT;
    }

    private static final long visit_double$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_double)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_double$offset() {
        return visit_double$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_double)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_double(MemorySegment struct) {
        return struct.get(visit_double$LAYOUT, visit_double$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_double)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_double(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_double$LAYOUT, visit_double$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_boolean)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_boolean {

        visit_boolean() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_boolean.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_boolean.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_boolean$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_boolean"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_boolean)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_boolean$layout() {
        return visit_boolean$LAYOUT;
    }

    private static final long visit_boolean$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_boolean)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_boolean$offset() {
        return visit_boolean$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_boolean)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_boolean(MemorySegment struct) {
        return struct.get(visit_boolean$LAYOUT, visit_boolean$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_boolean)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_boolean(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_boolean$LAYOUT, visit_boolean$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_binary)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_binary {

        visit_binary() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_binary.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_binary.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_binary$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_binary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_binary)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_binary$layout() {
        return visit_binary$LAYOUT;
    }

    private static final long visit_binary$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_binary)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_binary$offset() {
        return visit_binary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_binary)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_binary(MemorySegment struct) {
        return struct.get(visit_binary$LAYOUT, visit_binary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_binary)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_binary(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_binary$LAYOUT, visit_binary$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_date)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_date {

        visit_date() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_date.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_date.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_date$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_date"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_date)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_date$layout() {
        return visit_date$LAYOUT;
    }

    private static final long visit_date$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_date)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_date$offset() {
        return visit_date$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_date)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_date(MemorySegment struct) {
        return struct.get(visit_date$LAYOUT, visit_date$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_date)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_date(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_date$LAYOUT, visit_date$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_timestamp)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_timestamp {

        visit_timestamp() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_timestamp.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_timestamp.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_timestamp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_timestamp)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_timestamp$layout() {
        return visit_timestamp$LAYOUT;
    }

    private static final long visit_timestamp$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_timestamp)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_timestamp$offset() {
        return visit_timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_timestamp)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_timestamp(MemorySegment struct) {
        return struct.get(visit_timestamp$LAYOUT, visit_timestamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_timestamp)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_timestamp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_timestamp$LAYOUT, visit_timestamp$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_timestamp_ntz)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static class visit_timestamp_ntz {

        visit_timestamp_ntz() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_timestamp_ntz.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_timestamp_ntz.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, boolean _x3, MemorySegment _x4) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_timestamp_ntz$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_timestamp_ntz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_timestamp_ntz)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final AddressLayout visit_timestamp_ntz$layout() {
        return visit_timestamp_ntz$LAYOUT;
    }

    private static final long visit_timestamp_ntz$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_timestamp_ntz)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static final long visit_timestamp_ntz$offset() {
        return visit_timestamp_ntz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_timestamp_ntz)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static MemorySegment visit_timestamp_ntz(MemorySegment struct) {
        return struct.get(visit_timestamp_ntz$LAYOUT, visit_timestamp_ntz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_timestamp_ntz)(void *, uintptr_t, struct kernel.oxidized_java.KernelStringSlice, bool, const struct CStringMap *)
     * }
     */
    public static void visit_timestamp_ntz(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_timestamp_ntz$LAYOUT, visit_timestamp_ntz$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

