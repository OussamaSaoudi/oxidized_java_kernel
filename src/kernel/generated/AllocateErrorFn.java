// Generated by jextract

package kernel.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * typedef struct EngineError {
 *     enum KernelError etype;
 * } *(*AllocateErrorFn)(enum KernelError {
 *     UnknownError,
 *     FFIError,
 *     EngineDataTypeError,
 *     ExtractError,
 *     GenericError,
 *     IOErrorError,
 *     FileNotFoundError,
 *     MissingColumnError,
 *     UnexpectedColumnTypeError,
 *     MissingDataError,
 *     MissingVersionError,
 *     DeletionVectorError,
 *     InvalidUrlError,
 *     MalformedJsonError,
 *     MissingMetadataError,
 *     MissingProtocolError,
 *     InvalidProtocolError,
 *     MissingMetadataAndProtocolError,
 *     ParseError,
 *     JoinFailureError,
 *     Utf8Error,
 *     ParseIntError,
 *     InvalidColumnMappingModeError,
 *     InvalidTableLocationError,
 *     InvalidDecimalError,
 *     InvalidStructDataError,
 *     InternalError,
 *     InvalidExpression,
 *     InvalidLogPath,
 *     InvalidCommitInfo,
 *     FileAlreadyExists,
 *     MissingCommitInfo,
 *     UnsupportedError,
 *     ParseIntervalError,
 *     ChangeDataFeedUnsupported,
 *     ChangeDataFeedIncompatibleSchema,
 *     InvalidCheckpoint
 * }, struct KernelStringSlice {
 *     const char *ptr;
 *     uintptr_t len;
 * })
 * }
 */
public class AllocateErrorFn {

    AllocateErrorFn() {
        // Should not be called directly
    }

    /**
     * The function pointer signature, expressed as a functional interface
     */
    public interface Function {
        MemorySegment apply(int etype, MemorySegment msg);
    }

    private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
        delta_kernel_ffi_h.C_POINTER,
        delta_kernel_ffi_h.C_INT,
        KernelStringSlice.layout()
    );

    /**
     * The descriptor of this function pointer
     */
    public static FunctionDescriptor descriptor() {
        return $DESC;
    }

    private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(AllocateErrorFn.Function.class, "apply", $DESC);

    /**
     * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
     * The lifetime of the returned segment is managed by {@code arena}
     */
    public static MemorySegment allocate(AllocateErrorFn.Function fi, Arena arena) {
        return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
    }

    private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

    /**
     * Invoke the upcall stub {@code funcPtr}, with given parameters
     */
    public static MemorySegment invoke(MemorySegment funcPtr,int etype, MemorySegment msg) {
        try {
            return (MemorySegment) DOWN$MH.invokeExact(funcPtr, etype, msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}

