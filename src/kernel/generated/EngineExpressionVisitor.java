// Generated by jextract

package kernel.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct EngineExpressionVisitor {
 *     void *data;
 *     uintptr_t (*make_field_list)(void *, uintptr_t);
 *     VisitLiteralFni32 visit_literal_int;
 *     VisitLiteralFni64 visit_literal_long;
 *     VisitLiteralFni16 visit_literal_short;
 *     VisitLiteralFni8 visit_literal_byte;
 *     VisitLiteralFnf32 visit_literal_float;
 *     VisitLiteralFnf64 visit_literal_double;
 *     VisitLiteralFnKernelStringSlice visit_literal_string;
 *     VisitLiteralFnbool visit_literal_bool;
 *     VisitLiteralFni64 visit_literal_timestamp;
 *     VisitLiteralFni64 visit_literal_timestamp_ntz;
 *     VisitLiteralFni32 visit_literal_date;
 *     void (*visit_literal_binary)(void *, uintptr_t, const uint8_t *, uintptr_t);
 *     void (*visit_literal_decimal)(void *, uintptr_t, uint64_t, uint64_t, uint8_t, uint8_t);
 *     void (*visit_literal_struct)(void *, uintptr_t, uintptr_t, uintptr_t);
 *     void (*visit_literal_array)(void *, uintptr_t, uintptr_t);
 *     void (*visit_literal_null)(void *, uintptr_t);
 *     VisitVariadicFn visit_and;
 *     VisitVariadicFn visit_or;
 *     VisitUnaryFn visit_not;
 *     VisitUnaryFn visit_is_null;
 *     VisitBinaryOpFn visit_lt;
 *     VisitBinaryOpFn visit_le;
 *     VisitBinaryOpFn visit_gt;
 *     VisitBinaryOpFn visit_ge;
 *     VisitBinaryOpFn visit_eq;
 *     VisitBinaryOpFn visit_ne;
 *     VisitBinaryOpFn visit_distinct;
 *     VisitBinaryOpFn visit_in;
 *     VisitBinaryOpFn visit_not_in;
 *     VisitBinaryOpFn visit_add;
 *     VisitBinaryOpFn visit_minus;
 *     VisitBinaryOpFn visit_multiply;
 *     VisitBinaryOpFn visit_divide;
 *     void (*visit_column)(void *, uintptr_t, struct KernelStringSlice);
 *     void (*visit_struct_expr)(void *, uintptr_t, uintptr_t);
 * }
 * }
 */
public class EngineExpressionVisitor {

    EngineExpressionVisitor() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        delta_kernel_ffi_h.C_POINTER.withName("data"),
        delta_kernel_ffi_h.C_POINTER.withName("make_field_list"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_int"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_long"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_short"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_byte"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_float"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_double"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_string"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_bool"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_timestamp"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_timestamp_ntz"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_date"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_binary"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_decimal"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_struct"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_array"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_literal_null"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_and"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_or"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_not"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_is_null"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_lt"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_le"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_gt"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_ge"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_eq"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_ne"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_distinct"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_in"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_not_in"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_add"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_minus"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_multiply"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_divide"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_column"),
        delta_kernel_ffi_h.C_POINTER.withName("visit_struct_expr")
    ).withName("EngineExpressionVisitor");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final AddressLayout data$layout() {
        return data$LAYOUT;
    }

    private static final long data$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static final long data$offset() {
        return data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static MemorySegment data(MemorySegment struct) {
        return struct.get(data$LAYOUT, data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *data
     * }
     */
    public static void data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(data$LAYOUT, data$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static class make_field_list {

        make_field_list() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            long apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(make_field_list.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(make_field_list.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static long invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                return (long) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout make_field_list$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("make_field_list"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static final AddressLayout make_field_list$layout() {
        return make_field_list$LAYOUT;
    }

    private static final long make_field_list$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static final long make_field_list$offset() {
        return make_field_list$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static MemorySegment make_field_list(MemorySegment struct) {
        return struct.get(make_field_list$LAYOUT, make_field_list$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * uintptr_t (*make_field_list)(void *, uintptr_t)
     * }
     */
    public static void make_field_list(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(make_field_list$LAYOUT, make_field_list$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_int$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_int"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFni32 visit_literal_int
     * }
     */
    public static final AddressLayout visit_literal_int$layout() {
        return visit_literal_int$LAYOUT;
    }

    private static final long visit_literal_int$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFni32 visit_literal_int
     * }
     */
    public static final long visit_literal_int$offset() {
        return visit_literal_int$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFni32 visit_literal_int
     * }
     */
    public static MemorySegment visit_literal_int(MemorySegment struct) {
        return struct.get(visit_literal_int$LAYOUT, visit_literal_int$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFni32 visit_literal_int
     * }
     */
    public static void visit_literal_int(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_int$LAYOUT, visit_literal_int$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_long$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_long"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_long
     * }
     */
    public static final AddressLayout visit_literal_long$layout() {
        return visit_literal_long$LAYOUT;
    }

    private static final long visit_literal_long$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_long
     * }
     */
    public static final long visit_literal_long$offset() {
        return visit_literal_long$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_long
     * }
     */
    public static MemorySegment visit_literal_long(MemorySegment struct) {
        return struct.get(visit_literal_long$LAYOUT, visit_literal_long$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_long
     * }
     */
    public static void visit_literal_long(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_long$LAYOUT, visit_literal_long$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_short$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_short"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFni16 visit_literal_short
     * }
     */
    public static final AddressLayout visit_literal_short$layout() {
        return visit_literal_short$LAYOUT;
    }

    private static final long visit_literal_short$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFni16 visit_literal_short
     * }
     */
    public static final long visit_literal_short$offset() {
        return visit_literal_short$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFni16 visit_literal_short
     * }
     */
    public static MemorySegment visit_literal_short(MemorySegment struct) {
        return struct.get(visit_literal_short$LAYOUT, visit_literal_short$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFni16 visit_literal_short
     * }
     */
    public static void visit_literal_short(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_short$LAYOUT, visit_literal_short$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_byte$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_byte"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFni8 visit_literal_byte
     * }
     */
    public static final AddressLayout visit_literal_byte$layout() {
        return visit_literal_byte$LAYOUT;
    }

    private static final long visit_literal_byte$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFni8 visit_literal_byte
     * }
     */
    public static final long visit_literal_byte$offset() {
        return visit_literal_byte$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFni8 visit_literal_byte
     * }
     */
    public static MemorySegment visit_literal_byte(MemorySegment struct) {
        return struct.get(visit_literal_byte$LAYOUT, visit_literal_byte$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFni8 visit_literal_byte
     * }
     */
    public static void visit_literal_byte(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_byte$LAYOUT, visit_literal_byte$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_float$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_float"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFnf32 visit_literal_float
     * }
     */
    public static final AddressLayout visit_literal_float$layout() {
        return visit_literal_float$LAYOUT;
    }

    private static final long visit_literal_float$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFnf32 visit_literal_float
     * }
     */
    public static final long visit_literal_float$offset() {
        return visit_literal_float$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFnf32 visit_literal_float
     * }
     */
    public static MemorySegment visit_literal_float(MemorySegment struct) {
        return struct.get(visit_literal_float$LAYOUT, visit_literal_float$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFnf32 visit_literal_float
     * }
     */
    public static void visit_literal_float(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_float$LAYOUT, visit_literal_float$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_double$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_double"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFnf64 visit_literal_double
     * }
     */
    public static final AddressLayout visit_literal_double$layout() {
        return visit_literal_double$LAYOUT;
    }

    private static final long visit_literal_double$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFnf64 visit_literal_double
     * }
     */
    public static final long visit_literal_double$offset() {
        return visit_literal_double$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFnf64 visit_literal_double
     * }
     */
    public static MemorySegment visit_literal_double(MemorySegment struct) {
        return struct.get(visit_literal_double$LAYOUT, visit_literal_double$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFnf64 visit_literal_double
     * }
     */
    public static void visit_literal_double(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_double$LAYOUT, visit_literal_double$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_string$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_string"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFnKernelStringSlice visit_literal_string
     * }
     */
    public static final AddressLayout visit_literal_string$layout() {
        return visit_literal_string$LAYOUT;
    }

    private static final long visit_literal_string$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFnKernelStringSlice visit_literal_string
     * }
     */
    public static final long visit_literal_string$offset() {
        return visit_literal_string$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFnKernelStringSlice visit_literal_string
     * }
     */
    public static MemorySegment visit_literal_string(MemorySegment struct) {
        return struct.get(visit_literal_string$LAYOUT, visit_literal_string$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFnKernelStringSlice visit_literal_string
     * }
     */
    public static void visit_literal_string(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_string$LAYOUT, visit_literal_string$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_bool$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_bool"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFnbool visit_literal_bool
     * }
     */
    public static final AddressLayout visit_literal_bool$layout() {
        return visit_literal_bool$LAYOUT;
    }

    private static final long visit_literal_bool$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFnbool visit_literal_bool
     * }
     */
    public static final long visit_literal_bool$offset() {
        return visit_literal_bool$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFnbool visit_literal_bool
     * }
     */
    public static MemorySegment visit_literal_bool(MemorySegment struct) {
        return struct.get(visit_literal_bool$LAYOUT, visit_literal_bool$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFnbool visit_literal_bool
     * }
     */
    public static void visit_literal_bool(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_bool$LAYOUT, visit_literal_bool$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_timestamp$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_timestamp"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_timestamp
     * }
     */
    public static final AddressLayout visit_literal_timestamp$layout() {
        return visit_literal_timestamp$LAYOUT;
    }

    private static final long visit_literal_timestamp$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_timestamp
     * }
     */
    public static final long visit_literal_timestamp$offset() {
        return visit_literal_timestamp$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_timestamp
     * }
     */
    public static MemorySegment visit_literal_timestamp(MemorySegment struct) {
        return struct.get(visit_literal_timestamp$LAYOUT, visit_literal_timestamp$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_timestamp
     * }
     */
    public static void visit_literal_timestamp(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_timestamp$LAYOUT, visit_literal_timestamp$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_timestamp_ntz$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_timestamp_ntz"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_timestamp_ntz
     * }
     */
    public static final AddressLayout visit_literal_timestamp_ntz$layout() {
        return visit_literal_timestamp_ntz$LAYOUT;
    }

    private static final long visit_literal_timestamp_ntz$OFFSET = 88;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_timestamp_ntz
     * }
     */
    public static final long visit_literal_timestamp_ntz$offset() {
        return visit_literal_timestamp_ntz$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_timestamp_ntz
     * }
     */
    public static MemorySegment visit_literal_timestamp_ntz(MemorySegment struct) {
        return struct.get(visit_literal_timestamp_ntz$LAYOUT, visit_literal_timestamp_ntz$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFni64 visit_literal_timestamp_ntz
     * }
     */
    public static void visit_literal_timestamp_ntz(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_timestamp_ntz$LAYOUT, visit_literal_timestamp_ntz$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_literal_date$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_date"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitLiteralFni32 visit_literal_date
     * }
     */
    public static final AddressLayout visit_literal_date$layout() {
        return visit_literal_date$LAYOUT;
    }

    private static final long visit_literal_date$OFFSET = 96;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitLiteralFni32 visit_literal_date
     * }
     */
    public static final long visit_literal_date$offset() {
        return visit_literal_date$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitLiteralFni32 visit_literal_date
     * }
     */
    public static MemorySegment visit_literal_date(MemorySegment struct) {
        return struct.get(visit_literal_date$LAYOUT, visit_literal_date$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitLiteralFni32 visit_literal_date
     * }
     */
    public static void visit_literal_date(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_date$LAYOUT, visit_literal_date$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_literal_binary)(void *, uintptr_t, const uint8_t *, uintptr_t)
     * }
     */
    public static class visit_literal_binary {

        visit_literal_binary() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_literal_binary.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_literal_binary.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2, long _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_literal_binary$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_binary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_literal_binary)(void *, uintptr_t, const uint8_t *, uintptr_t)
     * }
     */
    public static final AddressLayout visit_literal_binary$layout() {
        return visit_literal_binary$LAYOUT;
    }

    private static final long visit_literal_binary$OFFSET = 104;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_literal_binary)(void *, uintptr_t, const uint8_t *, uintptr_t)
     * }
     */
    public static final long visit_literal_binary$offset() {
        return visit_literal_binary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_literal_binary)(void *, uintptr_t, const uint8_t *, uintptr_t)
     * }
     */
    public static MemorySegment visit_literal_binary(MemorySegment struct) {
        return struct.get(visit_literal_binary$LAYOUT, visit_literal_binary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_literal_binary)(void *, uintptr_t, const uint8_t *, uintptr_t)
     * }
     */
    public static void visit_literal_binary(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_binary$LAYOUT, visit_literal_binary$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_literal_decimal)(void *, uintptr_t, uint64_t, uint64_t, uint8_t, uint8_t)
     * }
     */
    public static class visit_literal_decimal {

        visit_literal_decimal() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, long _x2, long _x3, byte _x4, byte _x5);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG_LONG,
            delta_kernel_ffi_h.C_LONG_LONG,
            delta_kernel_ffi_h.C_CHAR,
            delta_kernel_ffi_h.C_CHAR
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_literal_decimal.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_literal_decimal.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2, long _x3, byte _x4, byte _x5) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4, _x5);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_literal_decimal$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_decimal"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_literal_decimal)(void *, uintptr_t, uint64_t, uint64_t, uint8_t, uint8_t)
     * }
     */
    public static final AddressLayout visit_literal_decimal$layout() {
        return visit_literal_decimal$LAYOUT;
    }

    private static final long visit_literal_decimal$OFFSET = 112;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_literal_decimal)(void *, uintptr_t, uint64_t, uint64_t, uint8_t, uint8_t)
     * }
     */
    public static final long visit_literal_decimal$offset() {
        return visit_literal_decimal$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_literal_decimal)(void *, uintptr_t, uint64_t, uint64_t, uint8_t, uint8_t)
     * }
     */
    public static MemorySegment visit_literal_decimal(MemorySegment struct) {
        return struct.get(visit_literal_decimal$LAYOUT, visit_literal_decimal$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_literal_decimal)(void *, uintptr_t, uint64_t, uint64_t, uint8_t, uint8_t)
     * }
     */
    public static void visit_literal_decimal(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_decimal$LAYOUT, visit_literal_decimal$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_literal_struct)(void *, uintptr_t, uintptr_t, uintptr_t)
     * }
     */
    public static class visit_literal_struct {

        visit_literal_struct() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, long _x2, long _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_literal_struct.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_literal_struct.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2, long _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_literal_struct$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_struct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_literal_struct)(void *, uintptr_t, uintptr_t, uintptr_t)
     * }
     */
    public static final AddressLayout visit_literal_struct$layout() {
        return visit_literal_struct$LAYOUT;
    }

    private static final long visit_literal_struct$OFFSET = 120;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_literal_struct)(void *, uintptr_t, uintptr_t, uintptr_t)
     * }
     */
    public static final long visit_literal_struct$offset() {
        return visit_literal_struct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_literal_struct)(void *, uintptr_t, uintptr_t, uintptr_t)
     * }
     */
    public static MemorySegment visit_literal_struct(MemorySegment struct) {
        return struct.get(visit_literal_struct$LAYOUT, visit_literal_struct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_literal_struct)(void *, uintptr_t, uintptr_t, uintptr_t)
     * }
     */
    public static void visit_literal_struct(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_struct$LAYOUT, visit_literal_struct$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_literal_array)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static class visit_literal_array {

        visit_literal_array() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_literal_array.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_literal_array.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_literal_array$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_array"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_literal_array)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static final AddressLayout visit_literal_array$layout() {
        return visit_literal_array$LAYOUT;
    }

    private static final long visit_literal_array$OFFSET = 128;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_literal_array)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static final long visit_literal_array$offset() {
        return visit_literal_array$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_literal_array)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static MemorySegment visit_literal_array(MemorySegment struct) {
        return struct.get(visit_literal_array$LAYOUT, visit_literal_array$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_literal_array)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static void visit_literal_array(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_array$LAYOUT, visit_literal_array$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_literal_null)(void *, uintptr_t)
     * }
     */
    public static class visit_literal_null {

        visit_literal_null() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_literal_null.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_literal_null.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_literal_null$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_literal_null"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_literal_null)(void *, uintptr_t)
     * }
     */
    public static final AddressLayout visit_literal_null$layout() {
        return visit_literal_null$LAYOUT;
    }

    private static final long visit_literal_null$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_literal_null)(void *, uintptr_t)
     * }
     */
    public static final long visit_literal_null$offset() {
        return visit_literal_null$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_literal_null)(void *, uintptr_t)
     * }
     */
    public static MemorySegment visit_literal_null(MemorySegment struct) {
        return struct.get(visit_literal_null$LAYOUT, visit_literal_null$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_literal_null)(void *, uintptr_t)
     * }
     */
    public static void visit_literal_null(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_literal_null$LAYOUT, visit_literal_null$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_and$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_and"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitVariadicFn visit_and
     * }
     */
    public static final AddressLayout visit_and$layout() {
        return visit_and$LAYOUT;
    }

    private static final long visit_and$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitVariadicFn visit_and
     * }
     */
    public static final long visit_and$offset() {
        return visit_and$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitVariadicFn visit_and
     * }
     */
    public static MemorySegment visit_and(MemorySegment struct) {
        return struct.get(visit_and$LAYOUT, visit_and$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitVariadicFn visit_and
     * }
     */
    public static void visit_and(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_and$LAYOUT, visit_and$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_or$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_or"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitVariadicFn visit_or
     * }
     */
    public static final AddressLayout visit_or$layout() {
        return visit_or$LAYOUT;
    }

    private static final long visit_or$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitVariadicFn visit_or
     * }
     */
    public static final long visit_or$offset() {
        return visit_or$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitVariadicFn visit_or
     * }
     */
    public static MemorySegment visit_or(MemorySegment struct) {
        return struct.get(visit_or$LAYOUT, visit_or$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitVariadicFn visit_or
     * }
     */
    public static void visit_or(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_or$LAYOUT, visit_or$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_not$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_not"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitUnaryFn visit_not
     * }
     */
    public static final AddressLayout visit_not$layout() {
        return visit_not$LAYOUT;
    }

    private static final long visit_not$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitUnaryFn visit_not
     * }
     */
    public static final long visit_not$offset() {
        return visit_not$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitUnaryFn visit_not
     * }
     */
    public static MemorySegment visit_not(MemorySegment struct) {
        return struct.get(visit_not$LAYOUT, visit_not$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitUnaryFn visit_not
     * }
     */
    public static void visit_not(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_not$LAYOUT, visit_not$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_is_null$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_is_null"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitUnaryFn visit_is_null
     * }
     */
    public static final AddressLayout visit_is_null$layout() {
        return visit_is_null$LAYOUT;
    }

    private static final long visit_is_null$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitUnaryFn visit_is_null
     * }
     */
    public static final long visit_is_null$offset() {
        return visit_is_null$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitUnaryFn visit_is_null
     * }
     */
    public static MemorySegment visit_is_null(MemorySegment struct) {
        return struct.get(visit_is_null$LAYOUT, visit_is_null$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitUnaryFn visit_is_null
     * }
     */
    public static void visit_is_null(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_is_null$LAYOUT, visit_is_null$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_lt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_lt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_lt
     * }
     */
    public static final AddressLayout visit_lt$layout() {
        return visit_lt$LAYOUT;
    }

    private static final long visit_lt$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_lt
     * }
     */
    public static final long visit_lt$offset() {
        return visit_lt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_lt
     * }
     */
    public static MemorySegment visit_lt(MemorySegment struct) {
        return struct.get(visit_lt$LAYOUT, visit_lt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_lt
     * }
     */
    public static void visit_lt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_lt$LAYOUT, visit_lt$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_le$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_le"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_le
     * }
     */
    public static final AddressLayout visit_le$layout() {
        return visit_le$LAYOUT;
    }

    private static final long visit_le$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_le
     * }
     */
    public static final long visit_le$offset() {
        return visit_le$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_le
     * }
     */
    public static MemorySegment visit_le(MemorySegment struct) {
        return struct.get(visit_le$LAYOUT, visit_le$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_le
     * }
     */
    public static void visit_le(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_le$LAYOUT, visit_le$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_gt$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_gt"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_gt
     * }
     */
    public static final AddressLayout visit_gt$layout() {
        return visit_gt$LAYOUT;
    }

    private static final long visit_gt$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_gt
     * }
     */
    public static final long visit_gt$offset() {
        return visit_gt$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_gt
     * }
     */
    public static MemorySegment visit_gt(MemorySegment struct) {
        return struct.get(visit_gt$LAYOUT, visit_gt$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_gt
     * }
     */
    public static void visit_gt(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_gt$LAYOUT, visit_gt$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_ge$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_ge"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_ge
     * }
     */
    public static final AddressLayout visit_ge$layout() {
        return visit_ge$LAYOUT;
    }

    private static final long visit_ge$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_ge
     * }
     */
    public static final long visit_ge$offset() {
        return visit_ge$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_ge
     * }
     */
    public static MemorySegment visit_ge(MemorySegment struct) {
        return struct.get(visit_ge$LAYOUT, visit_ge$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_ge
     * }
     */
    public static void visit_ge(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_ge$LAYOUT, visit_ge$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_eq$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_eq"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_eq
     * }
     */
    public static final AddressLayout visit_eq$layout() {
        return visit_eq$LAYOUT;
    }

    private static final long visit_eq$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_eq
     * }
     */
    public static final long visit_eq$offset() {
        return visit_eq$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_eq
     * }
     */
    public static MemorySegment visit_eq(MemorySegment struct) {
        return struct.get(visit_eq$LAYOUT, visit_eq$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_eq
     * }
     */
    public static void visit_eq(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_eq$LAYOUT, visit_eq$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_ne$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_ne"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_ne
     * }
     */
    public static final AddressLayout visit_ne$layout() {
        return visit_ne$LAYOUT;
    }

    private static final long visit_ne$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_ne
     * }
     */
    public static final long visit_ne$offset() {
        return visit_ne$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_ne
     * }
     */
    public static MemorySegment visit_ne(MemorySegment struct) {
        return struct.get(visit_ne$LAYOUT, visit_ne$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_ne
     * }
     */
    public static void visit_ne(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_ne$LAYOUT, visit_ne$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_distinct$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_distinct"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_distinct
     * }
     */
    public static final AddressLayout visit_distinct$layout() {
        return visit_distinct$LAYOUT;
    }

    private static final long visit_distinct$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_distinct
     * }
     */
    public static final long visit_distinct$offset() {
        return visit_distinct$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_distinct
     * }
     */
    public static MemorySegment visit_distinct(MemorySegment struct) {
        return struct.get(visit_distinct$LAYOUT, visit_distinct$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_distinct
     * }
     */
    public static void visit_distinct(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_distinct$LAYOUT, visit_distinct$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_in$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_in"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_in
     * }
     */
    public static final AddressLayout visit_in$layout() {
        return visit_in$LAYOUT;
    }

    private static final long visit_in$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_in
     * }
     */
    public static final long visit_in$offset() {
        return visit_in$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_in
     * }
     */
    public static MemorySegment visit_in(MemorySegment struct) {
        return struct.get(visit_in$LAYOUT, visit_in$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_in
     * }
     */
    public static void visit_in(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_in$LAYOUT, visit_in$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_not_in$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_not_in"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_not_in
     * }
     */
    public static final AddressLayout visit_not_in$layout() {
        return visit_not_in$LAYOUT;
    }

    private static final long visit_not_in$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_not_in
     * }
     */
    public static final long visit_not_in$offset() {
        return visit_not_in$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_not_in
     * }
     */
    public static MemorySegment visit_not_in(MemorySegment struct) {
        return struct.get(visit_not_in$LAYOUT, visit_not_in$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_not_in
     * }
     */
    public static void visit_not_in(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_not_in$LAYOUT, visit_not_in$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_add$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_add"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_add
     * }
     */
    public static final AddressLayout visit_add$layout() {
        return visit_add$LAYOUT;
    }

    private static final long visit_add$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_add
     * }
     */
    public static final long visit_add$offset() {
        return visit_add$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_add
     * }
     */
    public static MemorySegment visit_add(MemorySegment struct) {
        return struct.get(visit_add$LAYOUT, visit_add$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_add
     * }
     */
    public static void visit_add(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_add$LAYOUT, visit_add$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_minus$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_minus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_minus
     * }
     */
    public static final AddressLayout visit_minus$layout() {
        return visit_minus$LAYOUT;
    }

    private static final long visit_minus$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_minus
     * }
     */
    public static final long visit_minus$offset() {
        return visit_minus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_minus
     * }
     */
    public static MemorySegment visit_minus(MemorySegment struct) {
        return struct.get(visit_minus$LAYOUT, visit_minus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_minus
     * }
     */
    public static void visit_minus(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_minus$LAYOUT, visit_minus$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_multiply$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_multiply"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_multiply
     * }
     */
    public static final AddressLayout visit_multiply$layout() {
        return visit_multiply$LAYOUT;
    }

    private static final long visit_multiply$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_multiply
     * }
     */
    public static final long visit_multiply$offset() {
        return visit_multiply$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_multiply
     * }
     */
    public static MemorySegment visit_multiply(MemorySegment struct) {
        return struct.get(visit_multiply$LAYOUT, visit_multiply$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_multiply
     * }
     */
    public static void visit_multiply(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_multiply$LAYOUT, visit_multiply$OFFSET, fieldValue);
    }

    private static final AddressLayout visit_divide$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_divide"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_divide
     * }
     */
    public static final AddressLayout visit_divide$layout() {
        return visit_divide$LAYOUT;
    }

    private static final long visit_divide$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_divide
     * }
     */
    public static final long visit_divide$offset() {
        return visit_divide$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_divide
     * }
     */
    public static MemorySegment visit_divide(MemorySegment struct) {
        return struct.get(visit_divide$LAYOUT, visit_divide$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * VisitBinaryOpFn visit_divide
     * }
     */
    public static void visit_divide(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_divide$LAYOUT, visit_divide$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_column)(void *, uintptr_t, struct KernelStringSlice)
     * }
     */
    public static class visit_column {

        visit_column() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            KernelStringSlice.layout()
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_column.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_column.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_column$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_column"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_column)(void *, uintptr_t, struct KernelStringSlice)
     * }
     */
    public static final AddressLayout visit_column$layout() {
        return visit_column$LAYOUT;
    }

    private static final long visit_column$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_column)(void *, uintptr_t, struct KernelStringSlice)
     * }
     */
    public static final long visit_column$offset() {
        return visit_column$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_column)(void *, uintptr_t, struct KernelStringSlice)
     * }
     */
    public static MemorySegment visit_column(MemorySegment struct) {
        return struct.get(visit_column$LAYOUT, visit_column$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_column)(void *, uintptr_t, struct KernelStringSlice)
     * }
     */
    public static void visit_column(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_column$LAYOUT, visit_column$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*visit_struct_expr)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static class visit_struct_expr {

        visit_struct_expr() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, long _x1, long _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(visit_struct_expr.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(visit_struct_expr.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, long _x1, long _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout visit_struct_expr$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visit_struct_expr"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*visit_struct_expr)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static final AddressLayout visit_struct_expr$layout() {
        return visit_struct_expr$LAYOUT;
    }

    private static final long visit_struct_expr$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*visit_struct_expr)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static final long visit_struct_expr$offset() {
        return visit_struct_expr$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*visit_struct_expr)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static MemorySegment visit_struct_expr(MemorySegment struct) {
        return struct.get(visit_struct_expr$LAYOUT, visit_struct_expr$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*visit_struct_expr)(void *, uintptr_t, uintptr_t)
     * }
     */
    public static void visit_struct_expr(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visit_struct_expr$LAYOUT, visit_struct_expr$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

