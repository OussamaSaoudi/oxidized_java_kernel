// Generated by jextract

package kernel.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct FFI_ArrowSchema {
 *     const char *format;
 *     const char *name;
 *     const char *metadata;
 *     int64_t flags;
 *     int64_t n_children;
 *     struct FFI_ArrowSchema **children;
 *     struct FFI_ArrowSchema *dictionary;
 *     void (*release)(struct FFI_ArrowSchema *);
 *     void *private_data;
 * }
 * }
 */
public class FFI_ArrowSchema {

    FFI_ArrowSchema() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        delta_kernel_ffi_h.C_POINTER.withName("format"),
        delta_kernel_ffi_h.C_POINTER.withName("name"),
        delta_kernel_ffi_h.C_POINTER.withName("metadata"),
        delta_kernel_ffi_h.C_LONG_LONG.withName("flags"),
        delta_kernel_ffi_h.C_LONG_LONG.withName("n_children"),
        delta_kernel_ffi_h.C_POINTER.withName("children"),
        delta_kernel_ffi_h.C_POINTER.withName("dictionary"),
        delta_kernel_ffi_h.C_POINTER.withName("release"),
        delta_kernel_ffi_h.C_POINTER.withName("private_data")
    ).withName("FFI_ArrowSchema");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout format$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("format"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *format
     * }
     */
    public static final AddressLayout format$layout() {
        return format$LAYOUT;
    }

    private static final long format$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *format
     * }
     */
    public static final long format$offset() {
        return format$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *format
     * }
     */
    public static MemorySegment format(MemorySegment struct) {
        return struct.get(format$LAYOUT, format$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *format
     * }
     */
    public static void format(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(format$LAYOUT, format$OFFSET, fieldValue);
    }

    private static final AddressLayout name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final AddressLayout name$layout() {
        return name$LAYOUT;
    }

    private static final long name$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static final long name$offset() {
        return name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static MemorySegment name(MemorySegment struct) {
        return struct.get(name$LAYOUT, name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *name
     * }
     */
    public static void name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(name$LAYOUT, name$OFFSET, fieldValue);
    }

    private static final AddressLayout metadata$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("metadata"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const char *metadata
     * }
     */
    public static final AddressLayout metadata$layout() {
        return metadata$LAYOUT;
    }

    private static final long metadata$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const char *metadata
     * }
     */
    public static final long metadata$offset() {
        return metadata$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const char *metadata
     * }
     */
    public static MemorySegment metadata(MemorySegment struct) {
        return struct.get(metadata$LAYOUT, metadata$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const char *metadata
     * }
     */
    public static void metadata(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(metadata$LAYOUT, metadata$OFFSET, fieldValue);
    }

    private static final OfLong flags$LAYOUT = (OfLong)$LAYOUT.select(groupElement("flags"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t flags
     * }
     */
    public static final OfLong flags$layout() {
        return flags$LAYOUT;
    }

    private static final long flags$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t flags
     * }
     */
    public static final long flags$offset() {
        return flags$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t flags
     * }
     */
    public static long flags(MemorySegment struct) {
        return struct.get(flags$LAYOUT, flags$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t flags
     * }
     */
    public static void flags(MemorySegment struct, long fieldValue) {
        struct.set(flags$LAYOUT, flags$OFFSET, fieldValue);
    }

    private static final OfLong n_children$LAYOUT = (OfLong)$LAYOUT.select(groupElement("n_children"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int64_t n_children
     * }
     */
    public static final OfLong n_children$layout() {
        return n_children$LAYOUT;
    }

    private static final long n_children$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int64_t n_children
     * }
     */
    public static final long n_children$offset() {
        return n_children$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int64_t n_children
     * }
     */
    public static long n_children(MemorySegment struct) {
        return struct.get(n_children$LAYOUT, n_children$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int64_t n_children
     * }
     */
    public static void n_children(MemorySegment struct, long fieldValue) {
        struct.set(n_children$LAYOUT, n_children$OFFSET, fieldValue);
    }

    private static final AddressLayout children$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("children"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct FFI_ArrowSchema **children
     * }
     */
    public static final AddressLayout children$layout() {
        return children$LAYOUT;
    }

    private static final long children$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct FFI_ArrowSchema **children
     * }
     */
    public static final long children$offset() {
        return children$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct FFI_ArrowSchema **children
     * }
     */
    public static MemorySegment children(MemorySegment struct) {
        return struct.get(children$LAYOUT, children$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct FFI_ArrowSchema **children
     * }
     */
    public static void children(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(children$LAYOUT, children$OFFSET, fieldValue);
    }

    private static final AddressLayout dictionary$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("dictionary"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * struct FFI_ArrowSchema *dictionary
     * }
     */
    public static final AddressLayout dictionary$layout() {
        return dictionary$LAYOUT;
    }

    private static final long dictionary$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * struct FFI_ArrowSchema *dictionary
     * }
     */
    public static final long dictionary$offset() {
        return dictionary$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * struct FFI_ArrowSchema *dictionary
     * }
     */
    public static MemorySegment dictionary(MemorySegment struct) {
        return struct.get(dictionary$LAYOUT, dictionary$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * struct FFI_ArrowSchema *dictionary
     * }
     */
    public static void dictionary(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(dictionary$LAYOUT, dictionary$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*release)(struct FFI_ArrowSchema *)
     * }
     */
    public static class release {

        release() {
            // Should not be called directly
        }

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = delta_kernel_ffi_h.upcallHandle(release.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(release.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout release$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("release"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*release)(struct FFI_ArrowSchema *)
     * }
     */
    public static final AddressLayout release$layout() {
        return release$LAYOUT;
    }

    private static final long release$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*release)(struct FFI_ArrowSchema *)
     * }
     */
    public static final long release$offset() {
        return release$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*release)(struct FFI_ArrowSchema *)
     * }
     */
    public static MemorySegment release(MemorySegment struct) {
        return struct.get(release$LAYOUT, release$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*release)(struct FFI_ArrowSchema *)
     * }
     */
    public static void release(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(release$LAYOUT, release$OFFSET, fieldValue);
    }

    private static final AddressLayout private_data$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("private_data"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *private_data
     * }
     */
    public static final AddressLayout private_data$layout() {
        return private_data$LAYOUT;
    }

    private static final long private_data$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *private_data
     * }
     */
    public static final long private_data$offset() {
        return private_data$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *private_data
     * }
     */
    public static MemorySegment private_data(MemorySegment struct) {
        return struct.get(private_data$LAYOUT, private_data$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *private_data
     * }
     */
    public static void private_data(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(private_data$LAYOUT, private_data$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

