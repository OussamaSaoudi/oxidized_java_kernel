// Generated by jextract

package kernel.generated;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class delta_kernel_ffi_h {

    delta_kernel_ffi_h() {
        // Should not be called directly
    }

    static final Arena LIBRARY_ARENA = Arena.ofAuto();
    static final boolean TRACE_DOWNCALLS = Boolean.getBoolean("jextract.trace.downcalls");

    static void traceDowncall(String name, Object... args) {
         String traceArgs = Arrays.stream(args)
                       .map(Object::toString)
                       .collect(Collectors.joining(", "));
         System.out.printf("%s(%s)\n", name, traceArgs);
    }

    public static MemorySegment findOrThrow(String symbol) {
        return SYMBOL_LOOKUP.find(symbol)
            .orElseThrow(() -> new UnsatisfiedLinkError("unresolved symbol: " + symbol));
    }

    public static MethodHandle upcallHandle(Class<?> fi, String name, FunctionDescriptor fdesc) {
        try {
            return MethodHandles.lookup().findVirtual(fi, name, fdesc.toMethodType());
        } catch (ReflectiveOperationException ex) {
            throw new AssertionError(ex);
        }
    }

    static MemoryLayout align(MemoryLayout layout, long align) {
        return switch (layout) {
            case PaddingLayout p -> p;
            case ValueLayout v -> v.withByteAlignment(align);
            case GroupLayout g -> {
                MemoryLayout[] alignedMembers = g.memberLayouts().stream()
                        .map(m -> align(m, align)).toArray(MemoryLayout[]::new);
                yield g instanceof StructLayout ?
                        MemoryLayout.structLayout(alignedMembers) : MemoryLayout.unionLayout(alignedMembers);
            }
            case SequenceLayout s -> MemoryLayout.sequenceLayout(s.elementCount(), align(s.elementLayout(), align));
        };
    }

    static final SymbolLookup SYMBOL_LOOKUP = SymbolLookup.libraryLookup("/Users/oussama.saoudi/oxidized_java_kernel/delta-kernel-rs/target/release/libdelta_kernel_ffi.dylib", LIBRARY_ARENA)
            .or(SymbolLookup.loaderLookup())
            .or(Linker.nativeLinker().defaultLookup());

    public static final ValueLayout.OfBoolean C_BOOL = ValueLayout.JAVA_BOOLEAN;
    public static final ValueLayout.OfByte C_CHAR = ValueLayout.JAVA_BYTE;
    public static final ValueLayout.OfShort C_SHORT = ValueLayout.JAVA_SHORT;
    public static final ValueLayout.OfInt C_INT = ValueLayout.JAVA_INT;
    public static final ValueLayout.OfLong C_LONG_LONG = ValueLayout.JAVA_LONG;
    public static final ValueLayout.OfFloat C_FLOAT = ValueLayout.JAVA_FLOAT;
    public static final ValueLayout.OfDouble C_DOUBLE = ValueLayout.JAVA_DOUBLE;
    public static final AddressLayout C_POINTER = ValueLayout.ADDRESS
            .withTargetLayout(MemoryLayout.sequenceLayout(java.lang.Long.MAX_VALUE, JAVA_BYTE));
    public static final ValueLayout.OfLong C_LONG = ValueLayout.JAVA_LONG;
    private static final int UnknownError_ = (int)0L;
    /**
     * {@snippet lang=c :
     * enum KernelError.UnknownError = 0
     * }
     */
    public static int UnknownError_() {
        return UnknownError_;
    }
    private static final int FFIError = (int)1L;
    /**
     * {@snippet lang=c :
     * enum KernelError.FFIError = 1
     * }
     */
    public static int FFIError() {
        return FFIError;
    }
    private static final int EngineDataTypeError = (int)2L;
    /**
     * {@snippet lang=c :
     * enum KernelError.EngineDataTypeError = 2
     * }
     */
    public static int EngineDataTypeError() {
        return EngineDataTypeError;
    }
    private static final int ExtractError = (int)3L;
    /**
     * {@snippet lang=c :
     * enum KernelError.ExtractError = 3
     * }
     */
    public static int ExtractError() {
        return ExtractError;
    }
    private static final int GenericError = (int)4L;
    /**
     * {@snippet lang=c :
     * enum KernelError.GenericError = 4
     * }
     */
    public static int GenericError() {
        return GenericError;
    }
    private static final int IOErrorError = (int)5L;
    /**
     * {@snippet lang=c :
     * enum KernelError.IOErrorError = 5
     * }
     */
    public static int IOErrorError() {
        return IOErrorError;
    }
    private static final int FileNotFoundError = (int)6L;
    /**
     * {@snippet lang=c :
     * enum KernelError.FileNotFoundError = 6
     * }
     */
    public static int FileNotFoundError() {
        return FileNotFoundError;
    }
    private static final int MissingColumnError = (int)7L;
    /**
     * {@snippet lang=c :
     * enum KernelError.MissingColumnError = 7
     * }
     */
    public static int MissingColumnError() {
        return MissingColumnError;
    }
    private static final int UnexpectedColumnTypeError = (int)8L;
    /**
     * {@snippet lang=c :
     * enum KernelError.UnexpectedColumnTypeError = 8
     * }
     */
    public static int UnexpectedColumnTypeError() {
        return UnexpectedColumnTypeError;
    }
    private static final int MissingDataError = (int)9L;
    /**
     * {@snippet lang=c :
     * enum KernelError.MissingDataError = 9
     * }
     */
    public static int MissingDataError() {
        return MissingDataError;
    }
    private static final int MissingVersionError = (int)10L;
    /**
     * {@snippet lang=c :
     * enum KernelError.MissingVersionError = 10
     * }
     */
    public static int MissingVersionError() {
        return MissingVersionError;
    }
    private static final int DeletionVectorError = (int)11L;
    /**
     * {@snippet lang=c :
     * enum KernelError.DeletionVectorError = 11
     * }
     */
    public static int DeletionVectorError() {
        return DeletionVectorError;
    }
    private static final int InvalidUrlError = (int)12L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidUrlError = 12
     * }
     */
    public static int InvalidUrlError() {
        return InvalidUrlError;
    }
    private static final int MalformedJsonError = (int)13L;
    /**
     * {@snippet lang=c :
     * enum KernelError.MalformedJsonError = 13
     * }
     */
    public static int MalformedJsonError() {
        return MalformedJsonError;
    }
    private static final int MissingMetadataError = (int)14L;
    /**
     * {@snippet lang=c :
     * enum KernelError.MissingMetadataError = 14
     * }
     */
    public static int MissingMetadataError() {
        return MissingMetadataError;
    }
    private static final int MissingProtocolError = (int)15L;
    /**
     * {@snippet lang=c :
     * enum KernelError.MissingProtocolError = 15
     * }
     */
    public static int MissingProtocolError() {
        return MissingProtocolError;
    }
    private static final int InvalidProtocolError = (int)16L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidProtocolError = 16
     * }
     */
    public static int InvalidProtocolError() {
        return InvalidProtocolError;
    }
    private static final int MissingMetadataAndProtocolError = (int)17L;
    /**
     * {@snippet lang=c :
     * enum KernelError.MissingMetadataAndProtocolError = 17
     * }
     */
    public static int MissingMetadataAndProtocolError() {
        return MissingMetadataAndProtocolError;
    }
    private static final int ParseError = (int)18L;
    /**
     * {@snippet lang=c :
     * enum KernelError.ParseError = 18
     * }
     */
    public static int ParseError() {
        return ParseError;
    }
    private static final int JoinFailureError = (int)19L;
    /**
     * {@snippet lang=c :
     * enum KernelError.JoinFailureError = 19
     * }
     */
    public static int JoinFailureError() {
        return JoinFailureError;
    }
    private static final int Utf8Error = (int)20L;
    /**
     * {@snippet lang=c :
     * enum KernelError.Utf8Error = 20
     * }
     */
    public static int Utf8Error() {
        return Utf8Error;
    }
    private static final int ParseIntError = (int)21L;
    /**
     * {@snippet lang=c :
     * enum KernelError.ParseIntError = 21
     * }
     */
    public static int ParseIntError() {
        return ParseIntError;
    }
    private static final int InvalidColumnMappingModeError = (int)22L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidColumnMappingModeError = 22
     * }
     */
    public static int InvalidColumnMappingModeError() {
        return InvalidColumnMappingModeError;
    }
    private static final int InvalidTableLocationError = (int)23L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidTableLocationError = 23
     * }
     */
    public static int InvalidTableLocationError() {
        return InvalidTableLocationError;
    }
    private static final int InvalidDecimalError = (int)24L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidDecimalError = 24
     * }
     */
    public static int InvalidDecimalError() {
        return InvalidDecimalError;
    }
    private static final int InvalidStructDataError = (int)25L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidStructDataError = 25
     * }
     */
    public static int InvalidStructDataError() {
        return InvalidStructDataError;
    }
    private static final int InternalError_ = (int)26L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InternalError = 26
     * }
     */
    public static int InternalError_() {
        return InternalError_;
    }
    private static final int InvalidExpression = (int)27L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidExpression = 27
     * }
     */
    public static int InvalidExpression() {
        return InvalidExpression;
    }
    private static final int InvalidLogPath = (int)28L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidLogPath = 28
     * }
     */
    public static int InvalidLogPath() {
        return InvalidLogPath;
    }
    private static final int InvalidCommitInfo = (int)29L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidCommitInfo = 29
     * }
     */
    public static int InvalidCommitInfo() {
        return InvalidCommitInfo;
    }
    private static final int FileAlreadyExists = (int)30L;
    /**
     * {@snippet lang=c :
     * enum KernelError.FileAlreadyExists = 30
     * }
     */
    public static int FileAlreadyExists() {
        return FileAlreadyExists;
    }
    private static final int MissingCommitInfo = (int)31L;
    /**
     * {@snippet lang=c :
     * enum KernelError.MissingCommitInfo = 31
     * }
     */
    public static int MissingCommitInfo() {
        return MissingCommitInfo;
    }
    private static final int UnsupportedError = (int)32L;
    /**
     * {@snippet lang=c :
     * enum KernelError.UnsupportedError = 32
     * }
     */
    public static int UnsupportedError() {
        return UnsupportedError;
    }
    private static final int ParseIntervalError = (int)33L;
    /**
     * {@snippet lang=c :
     * enum KernelError.ParseIntervalError = 33
     * }
     */
    public static int ParseIntervalError() {
        return ParseIntervalError;
    }
    private static final int ChangeDataFeedUnsupported = (int)34L;
    /**
     * {@snippet lang=c :
     * enum KernelError.ChangeDataFeedUnsupported = 34
     * }
     */
    public static int ChangeDataFeedUnsupported() {
        return ChangeDataFeedUnsupported;
    }
    private static final int ChangeDataFeedIncompatibleSchema = (int)35L;
    /**
     * {@snippet lang=c :
     * enum KernelError.ChangeDataFeedIncompatibleSchema = 35
     * }
     */
    public static int ChangeDataFeedIncompatibleSchema() {
        return ChangeDataFeedIncompatibleSchema;
    }
    private static final int InvalidCheckpoint = (int)36L;
    /**
     * {@snippet lang=c :
     * enum KernelError.InvalidCheckpoint = 36
     * }
     */
    public static int InvalidCheckpoint() {
        return InvalidCheckpoint;
    }
    private static final int ERROR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum Level.ERROR = 0
     * }
     */
    public static int ERROR() {
        return ERROR;
    }
    private static final int WARN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum Level.WARN = 1
     * }
     */
    public static int WARN() {
        return WARN;
    }
    private static final int INFO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum Level.INFO = 2
     * }
     */
    public static int INFO() {
        return INFO;
    }
    private static final int DEBUG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum Level.DEBUG = 3
     * }
     */
    public static int DEBUG() {
        return DEBUG;
    }
    private static final int TRACE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum Level.TRACE = 4
     * }
     */
    public static int TRACE() {
        return TRACE;
    }
    private static final int FULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum LogLineFormat.FULL = 0
     * }
     */
    public static int FULL() {
        return FULL;
    }
    private static final int COMPACT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum LogLineFormat.COMPACT = 1
     * }
     */
    public static int COMPACT() {
        return COMPACT;
    }
    private static final int PRETTY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum LogLineFormat.PRETTY = 2
     * }
     */
    public static int PRETTY() {
        return PRETTY;
    }
    private static final int JSON = (int)3L;
    /**
     * {@snippet lang=c :
     * enum LogLineFormat.JSON = 3
     * }
     */
    public static int JSON() {
        return JSON;
    }
    /**
     * {@snippet lang=c :
     * typedef struct ExclusiveEngineData *HandleExclusiveEngineData
     * }
     */
    public static final AddressLayout HandleExclusiveEngineData = delta_kernel_ffi_h.C_POINTER;
    private static final int OkEngineBuilder = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultEngineBuilder_Tag.OkEngineBuilder = 0
     * }
     */
    public static int OkEngineBuilder() {
        return OkEngineBuilder;
    }
    private static final int ErrEngineBuilder = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultEngineBuilder_Tag.ErrEngineBuilder = 1
     * }
     */
    public static int ErrEngineBuilder() {
        return ErrEngineBuilder;
    }
    /**
     * {@snippet lang=c :
     * typedef struct SharedExternEngine *HandleSharedExternEngine
     * }
     */
    public static final AddressLayout HandleSharedExternEngine = delta_kernel_ffi_h.C_POINTER;
    private static final int OkHandleSharedExternEngine = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleSharedExternEngine_Tag.OkHandleSharedExternEngine = 0
     * }
     */
    public static int OkHandleSharedExternEngine() {
        return OkHandleSharedExternEngine;
    }
    private static final int ErrHandleSharedExternEngine = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleSharedExternEngine_Tag.ErrHandleSharedExternEngine = 1
     * }
     */
    public static int ErrHandleSharedExternEngine() {
        return ErrHandleSharedExternEngine;
    }
    /**
     * {@snippet lang=c :
     * typedef struct SharedSnapshot *HandleSharedSnapshot
     * }
     */
    public static final AddressLayout HandleSharedSnapshot = delta_kernel_ffi_h.C_POINTER;
    private static final int OkHandleSharedSnapshot = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleSharedSnapshot_Tag.OkHandleSharedSnapshot = 0
     * }
     */
    public static int OkHandleSharedSnapshot() {
        return OkHandleSharedSnapshot;
    }
    private static final int ErrHandleSharedSnapshot = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleSharedSnapshot_Tag.ErrHandleSharedSnapshot = 1
     * }
     */
    public static int ErrHandleSharedSnapshot() {
        return ErrHandleSharedSnapshot;
    }
    /**
     * {@snippet lang=c :
     * typedef void *NullableCvoid
     * }
     */
    public static final AddressLayout NullableCvoid = delta_kernel_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct StringSliceIterator *HandleStringSliceIterator
     * }
     */
    public static final AddressLayout HandleStringSliceIterator = delta_kernel_ffi_h.C_POINTER;
    private static final int OkArrowFFIData = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultArrowFFIData_Tag.OkArrowFFIData = 0
     * }
     */
    public static int OkArrowFFIData() {
        return OkArrowFFIData;
    }
    private static final int ErrArrowFFIData = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultArrowFFIData_Tag.ErrArrowFFIData = 1
     * }
     */
    public static int ErrArrowFFIData() {
        return ErrArrowFFIData;
    }
    private static final int Okbool = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultbool_Tag.Okbool = 0
     * }
     */
    public static int Okbool() {
        return Okbool;
    }
    private static final int Errbool = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultbool_Tag.Errbool = 1
     * }
     */
    public static int Errbool() {
        return Errbool;
    }
    /**
     * {@snippet lang=c :
     * typedef struct ExclusiveFileReadResultIterator *HandleExclusiveFileReadResultIterator
     * }
     */
    public static final AddressLayout HandleExclusiveFileReadResultIterator = delta_kernel_ffi_h.C_POINTER;
    private static final int OkHandleExclusiveFileReadResultIterator = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleExclusiveFileReadResultIterator_Tag.OkHandleExclusiveFileReadResultIterator = 0
     * }
     */
    public static int OkHandleExclusiveFileReadResultIterator() {
        return OkHandleExclusiveFileReadResultIterator;
    }
    private static final int ErrHandleExclusiveFileReadResultIterator = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleExclusiveFileReadResultIterator_Tag.ErrHandleExclusiveFileReadResultIterator = 1
     * }
     */
    public static int ErrHandleExclusiveFileReadResultIterator() {
        return ErrHandleExclusiveFileReadResultIterator;
    }
    /**
     * {@snippet lang=c :
     * typedef struct SharedSchema *HandleSharedSchema
     * }
     */
    public static final AddressLayout HandleSharedSchema = delta_kernel_ffi_h.C_POINTER;
    private static final int Okusize = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultusize_Tag.Okusize = 0
     * }
     */
    public static int Okusize() {
        return Okusize;
    }
    private static final int Errusize = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultusize_Tag.Errusize = 1
     * }
     */
    public static int Errusize() {
        return Errusize;
    }
    /**
     * {@snippet lang=c :
     * typedef struct SharedExpression *HandleSharedExpression
     * }
     */
    public static final AddressLayout HandleSharedExpression = delta_kernel_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct SharedScan *HandleSharedScan
     * }
     */
    public static final AddressLayout HandleSharedScan = delta_kernel_ffi_h.C_POINTER;
    private static final int OkHandleSharedScan = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleSharedScan_Tag.OkHandleSharedScan = 0
     * }
     */
    public static int OkHandleSharedScan() {
        return OkHandleSharedScan;
    }
    private static final int ErrHandleSharedScan = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleSharedScan_Tag.ErrHandleSharedScan = 1
     * }
     */
    public static int ErrHandleSharedScan() {
        return ErrHandleSharedScan;
    }
    /**
     * {@snippet lang=c :
     * typedef struct SharedGlobalScanState *HandleSharedGlobalScanState
     * }
     */
    public static final AddressLayout HandleSharedGlobalScanState = delta_kernel_ffi_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef struct SharedScanDataIterator *HandleSharedScanDataIterator
     * }
     */
    public static final AddressLayout HandleSharedScanDataIterator = delta_kernel_ffi_h.C_POINTER;
    private static final int OkHandleSharedScanDataIterator = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleSharedScanDataIterator_Tag.OkHandleSharedScanDataIterator = 0
     * }
     */
    public static int OkHandleSharedScanDataIterator() {
        return OkHandleSharedScanDataIterator;
    }
    private static final int ErrHandleSharedScanDataIterator = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultHandleSharedScanDataIterator_Tag.ErrHandleSharedScanDataIterator = 1
     * }
     */
    public static int ErrHandleSharedScanDataIterator() {
        return ErrHandleSharedScanDataIterator;
    }
    private static final int OkKernelBoolSlice = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultKernelBoolSlice_Tag.OkKernelBoolSlice = 0
     * }
     */
    public static int OkKernelBoolSlice() {
        return OkKernelBoolSlice;
    }
    private static final int ErrKernelBoolSlice = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultKernelBoolSlice_Tag.ErrKernelBoolSlice = 1
     * }
     */
    public static int ErrKernelBoolSlice() {
        return ErrKernelBoolSlice;
    }
    private static final int OkKernelRowIndexArray = (int)0L;
    /**
     * {@snippet lang=c :
     * enum ExternResultKernelRowIndexArray_Tag.OkKernelRowIndexArray = 0
     * }
     */
    public static int OkKernelRowIndexArray() {
        return OkKernelRowIndexArray;
    }
    private static final int ErrKernelRowIndexArray = (int)1L;
    /**
     * {@snippet lang=c :
     * enum ExternResultKernelRowIndexArray_Tag.ErrKernelRowIndexArray = 1
     * }
     */
    public static int ErrKernelRowIndexArray() {
        return ErrKernelRowIndexArray;
    }

    private static class free_bool_slice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            KernelBoolSlice.layout()
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_bool_slice");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_bool_slice(struct KernelBoolSlice slice)
     * }
     */
    public static FunctionDescriptor free_bool_slice$descriptor() {
        return free_bool_slice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_bool_slice(struct KernelBoolSlice slice)
     * }
     */
    public static MethodHandle free_bool_slice$handle() {
        return free_bool_slice.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_bool_slice(struct KernelBoolSlice slice)
     * }
     */
    public static MemorySegment free_bool_slice$address() {
        return free_bool_slice.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_bool_slice(struct KernelBoolSlice slice)
     * }
     */
    public static void free_bool_slice(MemorySegment slice) {
        var mh$ = free_bool_slice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_bool_slice", slice);
            }
            mh$.invokeExact(slice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_row_indexes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            KernelRowIndexArray.layout()
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_row_indexes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_row_indexes(struct KernelRowIndexArray slice)
     * }
     */
    public static FunctionDescriptor free_row_indexes$descriptor() {
        return free_row_indexes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_row_indexes(struct KernelRowIndexArray slice)
     * }
     */
    public static MethodHandle free_row_indexes$handle() {
        return free_row_indexes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_row_indexes(struct KernelRowIndexArray slice)
     * }
     */
    public static MemorySegment free_row_indexes$address() {
        return free_row_indexes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_row_indexes(struct KernelRowIndexArray slice)
     * }
     */
    public static void free_row_indexes(MemorySegment slice) {
        var mh$ = free_row_indexes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_row_indexes", slice);
            }
            mh$.invokeExact(slice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_engine_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_engine_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_engine_data(HandleExclusiveEngineData engine_data)
     * }
     */
    public static FunctionDescriptor free_engine_data$descriptor() {
        return free_engine_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_engine_data(HandleExclusiveEngineData engine_data)
     * }
     */
    public static MethodHandle free_engine_data$handle() {
        return free_engine_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_engine_data(HandleExclusiveEngineData engine_data)
     * }
     */
    public static MemorySegment free_engine_data$address() {
        return free_engine_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_engine_data(HandleExclusiveEngineData engine_data)
     * }
     */
    public static void free_engine_data(MemorySegment engine_data) {
        var mh$ = free_engine_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_engine_data", engine_data);
            }
            mh$.invokeExact(engine_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_engine {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_engine");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_engine(HandleSharedExternEngine engine)
     * }
     */
    public static FunctionDescriptor free_engine$descriptor() {
        return free_engine.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_engine(HandleSharedExternEngine engine)
     * }
     */
    public static MethodHandle free_engine$handle() {
        return free_engine.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_engine(HandleSharedExternEngine engine)
     * }
     */
    public static MemorySegment free_engine$address() {
        return free_engine.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_engine(HandleSharedExternEngine engine)
     * }
     */
    public static void free_engine(MemorySegment engine) {
        var mh$ = free_engine.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_engine", engine);
            }
            mh$.invokeExact(engine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class snapshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultHandleSharedSnapshot.layout(),
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("snapshot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedSnapshot snapshot(struct KernelStringSlice path, HandleSharedExternEngine engine)
     * }
     */
    public static FunctionDescriptor snapshot$descriptor() {
        return snapshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedSnapshot snapshot(struct KernelStringSlice path, HandleSharedExternEngine engine)
     * }
     */
    public static MethodHandle snapshot$handle() {
        return snapshot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedSnapshot snapshot(struct KernelStringSlice path, HandleSharedExternEngine engine)
     * }
     */
    public static MemorySegment snapshot$address() {
        return snapshot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultHandleSharedSnapshot snapshot(struct KernelStringSlice path, HandleSharedExternEngine engine)
     * }
     */
    public static MemorySegment snapshot(SegmentAllocator allocator, MemorySegment path, MemorySegment engine) {
        var mh$ = snapshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("snapshot", allocator, path, engine);
            }
            return (MemorySegment)mh$.invokeExact(allocator, path, engine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_snapshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_snapshot");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_snapshot(HandleSharedSnapshot snapshot)
     * }
     */
    public static FunctionDescriptor free_snapshot$descriptor() {
        return free_snapshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_snapshot(HandleSharedSnapshot snapshot)
     * }
     */
    public static MethodHandle free_snapshot$handle() {
        return free_snapshot.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_snapshot(HandleSharedSnapshot snapshot)
     * }
     */
    public static MemorySegment free_snapshot$address() {
        return free_snapshot.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_snapshot(HandleSharedSnapshot snapshot)
     * }
     */
    public static void free_snapshot(MemorySegment snapshot) {
        var mh$ = free_snapshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_snapshot", snapshot);
            }
            mh$.invokeExact(snapshot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG_LONG,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("version");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t version(HandleSharedSnapshot snapshot)
     * }
     */
    public static FunctionDescriptor version$descriptor() {
        return version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t version(HandleSharedSnapshot snapshot)
     * }
     */
    public static MethodHandle version$handle() {
        return version.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t version(HandleSharedSnapshot snapshot)
     * }
     */
    public static MemorySegment version$address() {
        return version.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t version(HandleSharedSnapshot snapshot)
     * }
     */
    public static long version(MemorySegment snapshot) {
        var mh$ = version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("version", snapshot);
            }
            return (long)mh$.invokeExact(snapshot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class snapshot_table_root {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("snapshot_table_root");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NullableCvoid snapshot_table_root(HandleSharedSnapshot snapshot, AllocateStringFn allocate_fn)
     * }
     */
    public static FunctionDescriptor snapshot_table_root$descriptor() {
        return snapshot_table_root.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NullableCvoid snapshot_table_root(HandleSharedSnapshot snapshot, AllocateStringFn allocate_fn)
     * }
     */
    public static MethodHandle snapshot_table_root$handle() {
        return snapshot_table_root.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NullableCvoid snapshot_table_root(HandleSharedSnapshot snapshot, AllocateStringFn allocate_fn)
     * }
     */
    public static MemorySegment snapshot_table_root$address() {
        return snapshot_table_root.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NullableCvoid snapshot_table_root(HandleSharedSnapshot snapshot, AllocateStringFn allocate_fn)
     * }
     */
    public static MemorySegment snapshot_table_root(MemorySegment snapshot, MemorySegment allocate_fn) {
        var mh$ = snapshot_table_root.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("snapshot_table_root", snapshot, allocate_fn);
            }
            return (MemorySegment)mh$.invokeExact(snapshot, allocate_fn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class string_slice_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("string_slice_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool string_slice_next(HandleStringSliceIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, struct KernelStringSlice))
     * }
     */
    public static FunctionDescriptor string_slice_next$descriptor() {
        return string_slice_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool string_slice_next(HandleStringSliceIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, struct KernelStringSlice))
     * }
     */
    public static MethodHandle string_slice_next$handle() {
        return string_slice_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool string_slice_next(HandleStringSliceIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, struct KernelStringSlice))
     * }
     */
    public static MemorySegment string_slice_next$address() {
        return string_slice_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool string_slice_next(HandleStringSliceIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, struct KernelStringSlice))
     * }
     */
    public static boolean string_slice_next(MemorySegment data, MemorySegment engine_context, MemorySegment engine_visitor) {
        var mh$ = string_slice_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("string_slice_next", data, engine_context, engine_visitor);
            }
            return (boolean)mh$.invokeExact(data, engine_context, engine_visitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_string_slice_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_string_slice_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_string_slice_data(HandleStringSliceIterator data)
     * }
     */
    public static FunctionDescriptor free_string_slice_data$descriptor() {
        return free_string_slice_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_string_slice_data(HandleStringSliceIterator data)
     * }
     */
    public static MethodHandle free_string_slice_data$handle() {
        return free_string_slice_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_string_slice_data(HandleStringSliceIterator data)
     * }
     */
    public static MemorySegment free_string_slice_data$address() {
        return free_string_slice_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_string_slice_data(HandleStringSliceIterator data)
     * }
     */
    public static void free_string_slice_data(MemorySegment data) {
        var mh$ = free_string_slice_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_string_slice_data", data);
            }
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class engine_data_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("engine_data_length");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t engine_data_length(HandleExclusiveEngineData *data)
     * }
     */
    public static FunctionDescriptor engine_data_length$descriptor() {
        return engine_data_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t engine_data_length(HandleExclusiveEngineData *data)
     * }
     */
    public static MethodHandle engine_data_length$handle() {
        return engine_data_length.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t engine_data_length(HandleExclusiveEngineData *data)
     * }
     */
    public static MemorySegment engine_data_length$address() {
        return engine_data_length.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t engine_data_length(HandleExclusiveEngineData *data)
     * }
     */
    public static long engine_data_length(MemorySegment data) {
        var mh$ = engine_data_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("engine_data_length", data);
            }
            return (long)mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class get_raw_engine_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("get_raw_engine_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *get_raw_engine_data(HandleExclusiveEngineData data)
     * }
     */
    public static FunctionDescriptor get_raw_engine_data$descriptor() {
        return get_raw_engine_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *get_raw_engine_data(HandleExclusiveEngineData data)
     * }
     */
    public static MethodHandle get_raw_engine_data$handle() {
        return get_raw_engine_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *get_raw_engine_data(HandleExclusiveEngineData data)
     * }
     */
    public static MemorySegment get_raw_engine_data$address() {
        return get_raw_engine_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *get_raw_engine_data(HandleExclusiveEngineData data)
     * }
     */
    public static MemorySegment get_raw_engine_data(MemorySegment data) {
        var mh$ = get_raw_engine_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_raw_engine_data", data);
            }
            return (MemorySegment)mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class read_result_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultbool.layout(),
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("read_result_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultbool read_result_next(HandleExclusiveFileReadResultIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, HandleExclusiveEngineData))
     * }
     */
    public static FunctionDescriptor read_result_next$descriptor() {
        return read_result_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultbool read_result_next(HandleExclusiveFileReadResultIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, HandleExclusiveEngineData))
     * }
     */
    public static MethodHandle read_result_next$handle() {
        return read_result_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultbool read_result_next(HandleExclusiveFileReadResultIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, HandleExclusiveEngineData))
     * }
     */
    public static MemorySegment read_result_next$address() {
        return read_result_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultbool read_result_next(HandleExclusiveFileReadResultIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, HandleExclusiveEngineData))
     * }
     */
    public static MemorySegment read_result_next(SegmentAllocator allocator, MemorySegment data, MemorySegment engine_context, MemorySegment engine_visitor) {
        var mh$ = read_result_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("read_result_next", allocator, data, engine_context, engine_visitor);
            }
            return (MemorySegment)mh$.invokeExact(allocator, data, engine_context, engine_visitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_read_result_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_read_result_iter");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_read_result_iter(HandleExclusiveFileReadResultIterator data)
     * }
     */
    public static FunctionDescriptor free_read_result_iter$descriptor() {
        return free_read_result_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_read_result_iter(HandleExclusiveFileReadResultIterator data)
     * }
     */
    public static MethodHandle free_read_result_iter$handle() {
        return free_read_result_iter.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_read_result_iter(HandleExclusiveFileReadResultIterator data)
     * }
     */
    public static MemorySegment free_read_result_iter$address() {
        return free_read_result_iter.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_read_result_iter(HandleExclusiveFileReadResultIterator data)
     * }
     */
    public static void free_read_result_iter(MemorySegment data) {
        var mh$ = free_read_result_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_read_result_iter", data);
            }
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class read_parquet_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultHandleExclusiveFileReadResultIterator.layout(),
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("read_parquet_file");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultHandleExclusiveFileReadResultIterator read_parquet_file(HandleSharedExternEngine engine, const struct FileMeta *file, HandleSharedSchema physical_schema)
     * }
     */
    public static FunctionDescriptor read_parquet_file$descriptor() {
        return read_parquet_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultHandleExclusiveFileReadResultIterator read_parquet_file(HandleSharedExternEngine engine, const struct FileMeta *file, HandleSharedSchema physical_schema)
     * }
     */
    public static MethodHandle read_parquet_file$handle() {
        return read_parquet_file.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultHandleExclusiveFileReadResultIterator read_parquet_file(HandleSharedExternEngine engine, const struct FileMeta *file, HandleSharedSchema physical_schema)
     * }
     */
    public static MemorySegment read_parquet_file$address() {
        return read_parquet_file.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultHandleExclusiveFileReadResultIterator read_parquet_file(HandleSharedExternEngine engine, const struct FileMeta *file, HandleSharedSchema physical_schema)
     * }
     */
    public static MemorySegment read_parquet_file(SegmentAllocator allocator, MemorySegment engine, MemorySegment file, MemorySegment physical_schema) {
        var mh$ = read_parquet_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("read_parquet_file", allocator, engine, file, physical_schema);
            }
            return (MemorySegment)mh$.invokeExact(allocator, engine, file, physical_schema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_and {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_and");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_and(struct KernelExpressionVisitorState *state, struct EngineIterator *children)
     * }
     */
    public static FunctionDescriptor visit_expression_and$descriptor() {
        return visit_expression_and.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_and(struct KernelExpressionVisitorState *state, struct EngineIterator *children)
     * }
     */
    public static MethodHandle visit_expression_and$handle() {
        return visit_expression_and.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_and(struct KernelExpressionVisitorState *state, struct EngineIterator *children)
     * }
     */
    public static MemorySegment visit_expression_and$address() {
        return visit_expression_and.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_and(struct KernelExpressionVisitorState *state, struct EngineIterator *children)
     * }
     */
    public static long visit_expression_and(MemorySegment state, MemorySegment children) {
        var mh$ = visit_expression_and.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_and", state, children);
            }
            return (long)mh$.invokeExact(state, children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_lt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_lt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_lt(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static FunctionDescriptor visit_expression_lt$descriptor() {
        return visit_expression_lt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_lt(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MethodHandle visit_expression_lt$handle() {
        return visit_expression_lt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_lt(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MemorySegment visit_expression_lt$address() {
        return visit_expression_lt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_lt(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static long visit_expression_lt(MemorySegment state, long a, long b) {
        var mh$ = visit_expression_lt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_lt", state, a, b);
            }
            return (long)mh$.invokeExact(state, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_le {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_le");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_le(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static FunctionDescriptor visit_expression_le$descriptor() {
        return visit_expression_le.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_le(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MethodHandle visit_expression_le$handle() {
        return visit_expression_le.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_le(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MemorySegment visit_expression_le$address() {
        return visit_expression_le.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_le(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static long visit_expression_le(MemorySegment state, long a, long b) {
        var mh$ = visit_expression_le.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_le", state, a, b);
            }
            return (long)mh$.invokeExact(state, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_gt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_gt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_gt(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static FunctionDescriptor visit_expression_gt$descriptor() {
        return visit_expression_gt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_gt(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MethodHandle visit_expression_gt$handle() {
        return visit_expression_gt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_gt(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MemorySegment visit_expression_gt$address() {
        return visit_expression_gt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_gt(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static long visit_expression_gt(MemorySegment state, long a, long b) {
        var mh$ = visit_expression_gt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_gt", state, a, b);
            }
            return (long)mh$.invokeExact(state, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_ge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_ge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_ge(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static FunctionDescriptor visit_expression_ge$descriptor() {
        return visit_expression_ge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_ge(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MethodHandle visit_expression_ge$handle() {
        return visit_expression_ge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_ge(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MemorySegment visit_expression_ge$address() {
        return visit_expression_ge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_ge(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static long visit_expression_ge(MemorySegment state, long a, long b) {
        var mh$ = visit_expression_ge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_ge", state, a, b);
            }
            return (long)mh$.invokeExact(state, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_eq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_eq");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_eq(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static FunctionDescriptor visit_expression_eq$descriptor() {
        return visit_expression_eq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_eq(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MethodHandle visit_expression_eq$handle() {
        return visit_expression_eq.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_eq(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static MemorySegment visit_expression_eq$address() {
        return visit_expression_eq.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_eq(struct KernelExpressionVisitorState *state, uintptr_t a, uintptr_t b)
     * }
     */
    public static long visit_expression_eq(MemorySegment state, long a, long b) {
        var mh$ = visit_expression_eq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_eq", state, a, b);
            }
            return (long)mh$.invokeExact(state, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_column {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultusize.layout(),
            delta_kernel_ffi_h.C_POINTER,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_column");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultusize visit_expression_column(struct KernelExpressionVisitorState *state, struct KernelStringSlice name, AllocateErrorFn allocate_error)
     * }
     */
    public static FunctionDescriptor visit_expression_column$descriptor() {
        return visit_expression_column.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultusize visit_expression_column(struct KernelExpressionVisitorState *state, struct KernelStringSlice name, AllocateErrorFn allocate_error)
     * }
     */
    public static MethodHandle visit_expression_column$handle() {
        return visit_expression_column.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultusize visit_expression_column(struct KernelExpressionVisitorState *state, struct KernelStringSlice name, AllocateErrorFn allocate_error)
     * }
     */
    public static MemorySegment visit_expression_column$address() {
        return visit_expression_column.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultusize visit_expression_column(struct KernelExpressionVisitorState *state, struct KernelStringSlice name, AllocateErrorFn allocate_error)
     * }
     */
    public static MemorySegment visit_expression_column(SegmentAllocator allocator, MemorySegment state, MemorySegment name, MemorySegment allocate_error) {
        var mh$ = visit_expression_column.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_column", allocator, state, name, allocate_error);
            }
            return (MemorySegment)mh$.invokeExact(allocator, state, name, allocate_error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_not {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_not");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_not(struct KernelExpressionVisitorState *state, uintptr_t inner_expr)
     * }
     */
    public static FunctionDescriptor visit_expression_not$descriptor() {
        return visit_expression_not.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_not(struct KernelExpressionVisitorState *state, uintptr_t inner_expr)
     * }
     */
    public static MethodHandle visit_expression_not$handle() {
        return visit_expression_not.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_not(struct KernelExpressionVisitorState *state, uintptr_t inner_expr)
     * }
     */
    public static MemorySegment visit_expression_not$address() {
        return visit_expression_not.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_not(struct KernelExpressionVisitorState *state, uintptr_t inner_expr)
     * }
     */
    public static long visit_expression_not(MemorySegment state, long inner_expr) {
        var mh$ = visit_expression_not.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_not", state, inner_expr);
            }
            return (long)mh$.invokeExact(state, inner_expr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_is_null {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_is_null");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_is_null(struct KernelExpressionVisitorState *state, uintptr_t inner_expr)
     * }
     */
    public static FunctionDescriptor visit_expression_is_null$descriptor() {
        return visit_expression_is_null.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_is_null(struct KernelExpressionVisitorState *state, uintptr_t inner_expr)
     * }
     */
    public static MethodHandle visit_expression_is_null$handle() {
        return visit_expression_is_null.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_is_null(struct KernelExpressionVisitorState *state, uintptr_t inner_expr)
     * }
     */
    public static MemorySegment visit_expression_is_null$address() {
        return visit_expression_is_null.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_is_null(struct KernelExpressionVisitorState *state, uintptr_t inner_expr)
     * }
     */
    public static long visit_expression_is_null(MemorySegment state, long inner_expr) {
        var mh$ = visit_expression_is_null.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_is_null", state, inner_expr);
            }
            return (long)mh$.invokeExact(state, inner_expr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_literal_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultusize.layout(),
            delta_kernel_ffi_h.C_POINTER,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_literal_string");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultusize visit_expression_literal_string(struct KernelExpressionVisitorState *state, struct KernelStringSlice value, AllocateErrorFn allocate_error)
     * }
     */
    public static FunctionDescriptor visit_expression_literal_string$descriptor() {
        return visit_expression_literal_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultusize visit_expression_literal_string(struct KernelExpressionVisitorState *state, struct KernelStringSlice value, AllocateErrorFn allocate_error)
     * }
     */
    public static MethodHandle visit_expression_literal_string$handle() {
        return visit_expression_literal_string.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultusize visit_expression_literal_string(struct KernelExpressionVisitorState *state, struct KernelStringSlice value, AllocateErrorFn allocate_error)
     * }
     */
    public static MemorySegment visit_expression_literal_string$address() {
        return visit_expression_literal_string.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultusize visit_expression_literal_string(struct KernelExpressionVisitorState *state, struct KernelStringSlice value, AllocateErrorFn allocate_error)
     * }
     */
    public static MemorySegment visit_expression_literal_string(SegmentAllocator allocator, MemorySegment state, MemorySegment value, MemorySegment allocate_error) {
        var mh$ = visit_expression_literal_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_literal_string", allocator, state, value, allocate_error);
            }
            return (MemorySegment)mh$.invokeExact(allocator, state, value, allocate_error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_literal_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_literal_int");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_int(struct KernelExpressionVisitorState *state, int32_t value)
     * }
     */
    public static FunctionDescriptor visit_expression_literal_int$descriptor() {
        return visit_expression_literal_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_int(struct KernelExpressionVisitorState *state, int32_t value)
     * }
     */
    public static MethodHandle visit_expression_literal_int$handle() {
        return visit_expression_literal_int.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_int(struct KernelExpressionVisitorState *state, int32_t value)
     * }
     */
    public static MemorySegment visit_expression_literal_int$address() {
        return visit_expression_literal_int.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_int(struct KernelExpressionVisitorState *state, int32_t value)
     * }
     */
    public static long visit_expression_literal_int(MemorySegment state, int value) {
        var mh$ = visit_expression_literal_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_literal_int", state, value);
            }
            return (long)mh$.invokeExact(state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_literal_long {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_LONG_LONG
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_literal_long");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_long(struct KernelExpressionVisitorState *state, int64_t value)
     * }
     */
    public static FunctionDescriptor visit_expression_literal_long$descriptor() {
        return visit_expression_literal_long.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_long(struct KernelExpressionVisitorState *state, int64_t value)
     * }
     */
    public static MethodHandle visit_expression_literal_long$handle() {
        return visit_expression_literal_long.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_long(struct KernelExpressionVisitorState *state, int64_t value)
     * }
     */
    public static MemorySegment visit_expression_literal_long$address() {
        return visit_expression_literal_long.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_long(struct KernelExpressionVisitorState *state, int64_t value)
     * }
     */
    public static long visit_expression_literal_long(MemorySegment state, long value) {
        var mh$ = visit_expression_literal_long.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_literal_long", state, value);
            }
            return (long)mh$.invokeExact(state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_literal_short {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_SHORT
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_literal_short");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_short(struct KernelExpressionVisitorState *state, int16_t value)
     * }
     */
    public static FunctionDescriptor visit_expression_literal_short$descriptor() {
        return visit_expression_literal_short.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_short(struct KernelExpressionVisitorState *state, int16_t value)
     * }
     */
    public static MethodHandle visit_expression_literal_short$handle() {
        return visit_expression_literal_short.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_short(struct KernelExpressionVisitorState *state, int16_t value)
     * }
     */
    public static MemorySegment visit_expression_literal_short$address() {
        return visit_expression_literal_short.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_short(struct KernelExpressionVisitorState *state, int16_t value)
     * }
     */
    public static long visit_expression_literal_short(MemorySegment state, short value) {
        var mh$ = visit_expression_literal_short.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_literal_short", state, value);
            }
            return (long)mh$.invokeExact(state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_literal_byte {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_CHAR
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_literal_byte");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_byte(struct KernelExpressionVisitorState *state, int8_t value)
     * }
     */
    public static FunctionDescriptor visit_expression_literal_byte$descriptor() {
        return visit_expression_literal_byte.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_byte(struct KernelExpressionVisitorState *state, int8_t value)
     * }
     */
    public static MethodHandle visit_expression_literal_byte$handle() {
        return visit_expression_literal_byte.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_byte(struct KernelExpressionVisitorState *state, int8_t value)
     * }
     */
    public static MemorySegment visit_expression_literal_byte$address() {
        return visit_expression_literal_byte.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_byte(struct KernelExpressionVisitorState *state, int8_t value)
     * }
     */
    public static long visit_expression_literal_byte(MemorySegment state, byte value) {
        var mh$ = visit_expression_literal_byte.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_literal_byte", state, value);
            }
            return (long)mh$.invokeExact(state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_literal_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_FLOAT
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_literal_float");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_float(struct KernelExpressionVisitorState *state, float value)
     * }
     */
    public static FunctionDescriptor visit_expression_literal_float$descriptor() {
        return visit_expression_literal_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_float(struct KernelExpressionVisitorState *state, float value)
     * }
     */
    public static MethodHandle visit_expression_literal_float$handle() {
        return visit_expression_literal_float.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_float(struct KernelExpressionVisitorState *state, float value)
     * }
     */
    public static MemorySegment visit_expression_literal_float$address() {
        return visit_expression_literal_float.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_float(struct KernelExpressionVisitorState *state, float value)
     * }
     */
    public static long visit_expression_literal_float(MemorySegment state, float value) {
        var mh$ = visit_expression_literal_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_literal_float", state, value);
            }
            return (long)mh$.invokeExact(state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_literal_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_literal_double");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_double(struct KernelExpressionVisitorState *state, double value)
     * }
     */
    public static FunctionDescriptor visit_expression_literal_double$descriptor() {
        return visit_expression_literal_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_double(struct KernelExpressionVisitorState *state, double value)
     * }
     */
    public static MethodHandle visit_expression_literal_double$handle() {
        return visit_expression_literal_double.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_double(struct KernelExpressionVisitorState *state, double value)
     * }
     */
    public static MemorySegment visit_expression_literal_double$address() {
        return visit_expression_literal_double.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_double(struct KernelExpressionVisitorState *state, double value)
     * }
     */
    public static long visit_expression_literal_double(MemorySegment state, double value) {
        var mh$ = visit_expression_literal_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_literal_double", state, value);
            }
            return (long)mh$.invokeExact(state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_expression_literal_bool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_BOOL
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression_literal_bool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_bool(struct KernelExpressionVisitorState *state, bool value)
     * }
     */
    public static FunctionDescriptor visit_expression_literal_bool$descriptor() {
        return visit_expression_literal_bool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_bool(struct KernelExpressionVisitorState *state, bool value)
     * }
     */
    public static MethodHandle visit_expression_literal_bool$handle() {
        return visit_expression_literal_bool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_bool(struct KernelExpressionVisitorState *state, bool value)
     * }
     */
    public static MemorySegment visit_expression_literal_bool$address() {
        return visit_expression_literal_bool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression_literal_bool(struct KernelExpressionVisitorState *state, bool value)
     * }
     */
    public static long visit_expression_literal_bool(MemorySegment state, boolean value) {
        var mh$ = visit_expression_literal_bool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression_literal_bool", state, value);
            }
            return (long)mh$.invokeExact(state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_kernel_predicate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_kernel_predicate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_kernel_predicate(HandleSharedExpression data)
     * }
     */
    public static FunctionDescriptor free_kernel_predicate$descriptor() {
        return free_kernel_predicate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_kernel_predicate(HandleSharedExpression data)
     * }
     */
    public static MethodHandle free_kernel_predicate$handle() {
        return free_kernel_predicate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_kernel_predicate(HandleSharedExpression data)
     * }
     */
    public static MemorySegment free_kernel_predicate$address() {
        return free_kernel_predicate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_kernel_predicate(HandleSharedExpression data)
     * }
     */
    public static void free_kernel_predicate(MemorySegment data) {
        var mh$ = free_kernel_predicate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_kernel_predicate", data);
            }
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }



    private static class builder_build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
                ExternResultHandleSharedExternEngine.layout(),
                ADDRESS
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("builder_build");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedExternEngine builder_build(struct EngineBuilder *builder);
     * }
     */
    public static FunctionDescriptor builder_build$descriptor() {
        return builder_build.DESC;
    }


    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedExternEngine builder_build(struct EngineBuilder *builder);
     * }
     */
    public static MethodHandle builder_build$handle() {
        return builder_build.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedExternEngine builder_build(struct EngineBuilder *builder);
     * }
     */
    public static MemorySegment builder_buildf$address() {
        return builder_build.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultHandleSharedExternEngine builder_build(struct EngineBuilder *builder);
     * }
     */
    public static MemorySegment builder_build(SegmentAllocator segmentAllocator, MemorySegment engine_builder) {
        var mh$ = builder_build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_engine_builder", segmentAllocator, engine_builder);
            }
            return (MemorySegment) mh$.invokeExact(segmentAllocator, engine_builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }


    private static class get_engine_builder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(

                ExternResultEngineBuilder.layout(),
                KernelStringSlice.layout(),
                ADDRESS
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("get_engine_builder");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultEngineBuilder get_engine_builder(KernelStringSlice path, AllocateErrorFn allocate_error)
     * }
     */
    public static FunctionDescriptor get_engine_builder$descriptor() {
        return get_engine_builder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultEngineBuilder get_engine_builder(KernelStringSlice path, AllocateErrorFn allocate_error)
     * }
     */
    public static MethodHandle get_engine_builder$handle() {
        return get_engine_builder.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultEngineBuilder get_engine_builder(KernelStringSlice path, AllocateErrorFn allocate_error)
     * }
     */
    public static MemorySegment get_engine_builder$address() {
        return get_engine_builder.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultEngineBuilder get_engine_builder(KernelStringSlice path, AllocateErrorFn allocate_error)
     * }
     */
    public static MemorySegment get_engine_builder(SegmentAllocator segmentAllocator, MemorySegment path, MemorySegment allocate_error) {
        var mh$ = get_engine_builder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_engine_builder", segmentAllocator, path, allocate_error);
            }
            return (MemorySegment) mh$.invokeExact(segmentAllocator, path, allocate_error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }


    private static class visit_expression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_expression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_expression(const HandleSharedExpression *expression, struct EngineExpressionVisitor *visitor)
     * }
     */
    public static FunctionDescriptor visit_expression$descriptor() {
        return visit_expression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_expression(const HandleSharedExpression *expression, struct EngineExpressionVisitor *visitor)
     * }
     */
    public static MethodHandle visit_expression$handle() {
        return visit_expression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_expression(const HandleSharedExpression *expression, struct EngineExpressionVisitor *visitor)
     * }
     */
    public static MemorySegment visit_expression$address() {
        return visit_expression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_expression(const HandleSharedExpression *expression, struct EngineExpressionVisitor *visitor)
     * }
     */
    public static long visit_expression(MemorySegment expression, MemorySegment visitor) {
        var mh$ = visit_expression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_expression", expression, visitor);
            }
            return (long)mh$.invokeExact(expression, visitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class enable_event_tracing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("enable_event_tracing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool enable_event_tracing(TracingEventFn callback, enum Level max_level)
     * }
     */
    public static FunctionDescriptor enable_event_tracing$descriptor() {
        return enable_event_tracing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool enable_event_tracing(TracingEventFn callback, enum Level max_level)
     * }
     */
    public static MethodHandle enable_event_tracing$handle() {
        return enable_event_tracing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool enable_event_tracing(TracingEventFn callback, enum Level max_level)
     * }
     */
    public static MemorySegment enable_event_tracing$address() {
        return enable_event_tracing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool enable_event_tracing(TracingEventFn callback, enum Level max_level)
     * }
     */
    public static boolean enable_event_tracing(MemorySegment callback, int max_level) {
        var mh$ = enable_event_tracing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("enable_event_tracing", callback, max_level);
            }
            return (boolean)mh$.invokeExact(callback, max_level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class enable_log_line_tracing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_INT
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("enable_log_line_tracing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool enable_log_line_tracing(TracingLogLineFn callback, enum Level max_level)
     * }
     */
    public static FunctionDescriptor enable_log_line_tracing$descriptor() {
        return enable_log_line_tracing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool enable_log_line_tracing(TracingLogLineFn callback, enum Level max_level)
     * }
     */
    public static MethodHandle enable_log_line_tracing$handle() {
        return enable_log_line_tracing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool enable_log_line_tracing(TracingLogLineFn callback, enum Level max_level)
     * }
     */
    public static MemorySegment enable_log_line_tracing$address() {
        return enable_log_line_tracing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool enable_log_line_tracing(TracingLogLineFn callback, enum Level max_level)
     * }
     */
    public static boolean enable_log_line_tracing(MemorySegment callback, int max_level) {
        var mh$ = enable_log_line_tracing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("enable_log_line_tracing", callback, max_level);
            }
            return (boolean)mh$.invokeExact(callback, max_level);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class enable_formatted_log_line_tracing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_INT,
            delta_kernel_ffi_h.C_INT,
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_BOOL,
            delta_kernel_ffi_h.C_BOOL
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("enable_formatted_log_line_tracing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * bool enable_formatted_log_line_tracing(TracingLogLineFn callback, enum Level max_level, enum LogLineFormat format, bool ansi, bool with_time, bool with_level, bool with_target)
     * }
     */
    public static FunctionDescriptor enable_formatted_log_line_tracing$descriptor() {
        return enable_formatted_log_line_tracing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * bool enable_formatted_log_line_tracing(TracingLogLineFn callback, enum Level max_level, enum LogLineFormat format, bool ansi, bool with_time, bool with_level, bool with_target)
     * }
     */
    public static MethodHandle enable_formatted_log_line_tracing$handle() {
        return enable_formatted_log_line_tracing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * bool enable_formatted_log_line_tracing(TracingLogLineFn callback, enum Level max_level, enum LogLineFormat format, bool ansi, bool with_time, bool with_level, bool with_target)
     * }
     */
    public static MemorySegment enable_formatted_log_line_tracing$address() {
        return enable_formatted_log_line_tracing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * bool enable_formatted_log_line_tracing(TracingLogLineFn callback, enum Level max_level, enum LogLineFormat format, bool ansi, bool with_time, bool with_level, bool with_target)
     * }
     */
    public static boolean enable_formatted_log_line_tracing(MemorySegment callback, int max_level, int format, boolean ansi, boolean with_time, boolean with_level, boolean with_target) {
        var mh$ = enable_formatted_log_line_tracing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("enable_formatted_log_line_tracing", callback, max_level, format, ansi, with_time, with_level, with_target);
            }
            return (boolean)mh$.invokeExact(callback, max_level, format, ansi, with_time, with_level, with_target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_scan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_scan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_scan(HandleSharedScan scan)
     * }
     */
    public static FunctionDescriptor free_scan$descriptor() {
        return free_scan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_scan(HandleSharedScan scan)
     * }
     */
    public static MethodHandle free_scan$handle() {
        return free_scan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_scan(HandleSharedScan scan)
     * }
     */
    public static MemorySegment free_scan$address() {
        return free_scan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_scan(HandleSharedScan scan)
     * }
     */
    public static void free_scan(MemorySegment scan) {
        var mh$ = free_scan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_scan", scan);
            }
            mh$.invokeExact(scan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scan {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultHandleSharedScan.layout(),
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("scan");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedScan scan(HandleSharedSnapshot snapshot, HandleSharedExternEngine engine, struct EnginePredicate *predicate)
     * }
     */
    public static FunctionDescriptor scan$descriptor() {
        return scan.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedScan scan(HandleSharedSnapshot snapshot, HandleSharedExternEngine engine, struct EnginePredicate *predicate)
     * }
     */
    public static MethodHandle scan$handle() {
        return scan.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedScan scan(HandleSharedSnapshot snapshot, HandleSharedExternEngine engine, struct EnginePredicate *predicate)
     * }
     */
    public static MemorySegment scan$address() {
        return scan.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultHandleSharedScan scan(HandleSharedSnapshot snapshot, HandleSharedExternEngine engine, struct EnginePredicate *predicate)
     * }
     */
    public static MemorySegment scan(SegmentAllocator allocator, MemorySegment snapshot, MemorySegment engine, MemorySegment predicate) {
        var mh$ = scan.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scan", allocator, snapshot, engine, predicate);
            }
            return (MemorySegment)mh$.invokeExact(allocator, snapshot, engine, predicate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class get_global_scan_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("get_global_scan_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HandleSharedGlobalScanState get_global_scan_state(HandleSharedScan scan)
     * }
     */
    public static FunctionDescriptor get_global_scan_state$descriptor() {
        return get_global_scan_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HandleSharedGlobalScanState get_global_scan_state(HandleSharedScan scan)
     * }
     */
    public static MethodHandle get_global_scan_state$handle() {
        return get_global_scan_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HandleSharedGlobalScanState get_global_scan_state(HandleSharedScan scan)
     * }
     */
    public static MemorySegment get_global_scan_state$address() {
        return get_global_scan_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HandleSharedGlobalScanState get_global_scan_state(HandleSharedScan scan)
     * }
     */
    public static MemorySegment get_global_scan_state(MemorySegment scan) {
        var mh$ = get_global_scan_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_global_scan_state", scan);
            }
            return (MemorySegment)mh$.invokeExact(scan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class get_global_read_schema {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("get_global_read_schema");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HandleSharedSchema get_global_read_schema(HandleSharedGlobalScanState state)
     * }
     */
    public static FunctionDescriptor get_global_read_schema$descriptor() {
        return get_global_read_schema.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HandleSharedSchema get_global_read_schema(HandleSharedGlobalScanState state)
     * }
     */
    public static MethodHandle get_global_read_schema$handle() {
        return get_global_read_schema.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HandleSharedSchema get_global_read_schema(HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment get_global_read_schema$address() {
        return get_global_read_schema.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HandleSharedSchema get_global_read_schema(HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment get_global_read_schema(MemorySegment state) {
        var mh$ = get_global_read_schema.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_global_read_schema", state);
            }
            return (MemorySegment)mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_global_read_schema {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_global_read_schema");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_global_read_schema(HandleSharedSchema schema)
     * }
     */
    public static FunctionDescriptor free_global_read_schema$descriptor() {
        return free_global_read_schema.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_global_read_schema(HandleSharedSchema schema)
     * }
     */
    public static MethodHandle free_global_read_schema$handle() {
        return free_global_read_schema.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_global_read_schema(HandleSharedSchema schema)
     * }
     */
    public static MemorySegment free_global_read_schema$address() {
        return free_global_read_schema.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_global_read_schema(HandleSharedSchema schema)
     * }
     */
    public static void free_global_read_schema(MemorySegment schema) {
        var mh$ = free_global_read_schema.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_global_read_schema", schema);
            }
            mh$.invokeExact(schema);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class get_partition_column_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("get_partition_column_count");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t get_partition_column_count(HandleSharedGlobalScanState state)
     * }
     */
    public static FunctionDescriptor get_partition_column_count$descriptor() {
        return get_partition_column_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t get_partition_column_count(HandleSharedGlobalScanState state)
     * }
     */
    public static MethodHandle get_partition_column_count$handle() {
        return get_partition_column_count.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t get_partition_column_count(HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment get_partition_column_count$address() {
        return get_partition_column_count.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t get_partition_column_count(HandleSharedGlobalScanState state)
     * }
     */
    public static long get_partition_column_count(MemorySegment state) {
        var mh$ = get_partition_column_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_partition_column_count", state);
            }
            return (long)mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class get_partition_columns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("get_partition_columns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HandleStringSliceIterator get_partition_columns(HandleSharedGlobalScanState state)
     * }
     */
    public static FunctionDescriptor get_partition_columns$descriptor() {
        return get_partition_columns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HandleStringSliceIterator get_partition_columns(HandleSharedGlobalScanState state)
     * }
     */
    public static MethodHandle get_partition_columns$handle() {
        return get_partition_columns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HandleStringSliceIterator get_partition_columns(HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment get_partition_columns$address() {
        return get_partition_columns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HandleStringSliceIterator get_partition_columns(HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment get_partition_columns(MemorySegment state) {
        var mh$ = get_partition_columns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_partition_columns", state);
            }
            return (MemorySegment)mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_global_scan_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_global_scan_state");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_global_scan_state(HandleSharedGlobalScanState state)
     * }
     */
    public static FunctionDescriptor free_global_scan_state$descriptor() {
        return free_global_scan_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_global_scan_state(HandleSharedGlobalScanState state)
     * }
     */
    public static MethodHandle free_global_scan_state$handle() {
        return free_global_scan_state.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_global_scan_state(HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment free_global_scan_state$address() {
        return free_global_scan_state.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_global_scan_state(HandleSharedGlobalScanState state)
     * }
     */
    public static void free_global_scan_state(MemorySegment state) {
        var mh$ = free_global_scan_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_global_scan_state", state);
            }
            mh$.invokeExact(state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class kernel_scan_data_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultHandleSharedScanDataIterator.layout(),
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("kernel_scan_data_init");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedScanDataIterator kernel_scan_data_init(HandleSharedExternEngine engine, HandleSharedScan scan)
     * }
     */
    public static FunctionDescriptor kernel_scan_data_init$descriptor() {
        return kernel_scan_data_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedScanDataIterator kernel_scan_data_init(HandleSharedExternEngine engine, HandleSharedScan scan)
     * }
     */
    public static MethodHandle kernel_scan_data_init$handle() {
        return kernel_scan_data_init.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultHandleSharedScanDataIterator kernel_scan_data_init(HandleSharedExternEngine engine, HandleSharedScan scan)
     * }
     */
    public static MemorySegment kernel_scan_data_init$address() {
        return kernel_scan_data_init.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultHandleSharedScanDataIterator kernel_scan_data_init(HandleSharedExternEngine engine, HandleSharedScan scan)
     * }
     */
    public static MemorySegment kernel_scan_data_init(SegmentAllocator allocator, MemorySegment engine, MemorySegment scan) {
        var mh$ = kernel_scan_data_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("kernel_scan_data_init", allocator, engine, scan);
            }
            return (MemorySegment)mh$.invokeExact(allocator, engine, scan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class kernel_scan_data_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultbool.layout(),
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("kernel_scan_data_next");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultbool kernel_scan_data_next(HandleSharedScanDataIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, HandleExclusiveEngineData, struct KernelBoolSlice, const struct CTransforms *))
     * }
     */
    public static FunctionDescriptor kernel_scan_data_next$descriptor() {
        return kernel_scan_data_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultbool kernel_scan_data_next(HandleSharedScanDataIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, HandleExclusiveEngineData, struct KernelBoolSlice, const struct CTransforms *))
     * }
     */
    public static MethodHandle kernel_scan_data_next$handle() {
        return kernel_scan_data_next.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultbool kernel_scan_data_next(HandleSharedScanDataIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, HandleExclusiveEngineData, struct KernelBoolSlice, const struct CTransforms *))
     * }
     */
    public static MemorySegment kernel_scan_data_next$address() {
        return kernel_scan_data_next.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultbool kernel_scan_data_next(HandleSharedScanDataIterator data, NullableCvoid engine_context, void (*engine_visitor)(NullableCvoid, HandleExclusiveEngineData, struct KernelBoolSlice, const struct CTransforms *))
     * }
     */
    public static MemorySegment kernel_scan_data_next(SegmentAllocator allocator, MemorySegment data, MemorySegment engine_context, MemorySegment engine_visitor) {
        var mh$ = kernel_scan_data_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("kernel_scan_data_next", allocator, data, engine_context, engine_visitor);
            }
            return (MemorySegment)mh$.invokeExact(allocator, data, engine_context, engine_visitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free_kernel_scan_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("free_kernel_scan_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void free_kernel_scan_data(HandleSharedScanDataIterator data)
     * }
     */
    public static FunctionDescriptor free_kernel_scan_data$descriptor() {
        return free_kernel_scan_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void free_kernel_scan_data(HandleSharedScanDataIterator data)
     * }
     */
    public static MethodHandle free_kernel_scan_data$handle() {
        return free_kernel_scan_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void free_kernel_scan_data(HandleSharedScanDataIterator data)
     * }
     */
    public static MemorySegment free_kernel_scan_data$address() {
        return free_kernel_scan_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void free_kernel_scan_data(HandleSharedScanDataIterator data)
     * }
     */
    public static void free_kernel_scan_data(MemorySegment data) {
        var mh$ = free_kernel_scan_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free_kernel_scan_data", data);
            }
            mh$.invokeExact(data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class get_from_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            KernelStringSlice.layout(),
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("get_from_map");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * NullableCvoid get_from_map(const struct CStringMap *map, struct KernelStringSlice key, AllocateStringFn allocate_fn)
     * }
     */
    public static FunctionDescriptor get_from_map$descriptor() {
        return get_from_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * NullableCvoid get_from_map(const struct CStringMap *map, struct KernelStringSlice key, AllocateStringFn allocate_fn)
     * }
     */
    public static MethodHandle get_from_map$handle() {
        return get_from_map.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * NullableCvoid get_from_map(const struct CStringMap *map, struct KernelStringSlice key, AllocateStringFn allocate_fn)
     * }
     */
    public static MemorySegment get_from_map$address() {
        return get_from_map.ADDR;
    }

    /**
     * {@snippet lang=c :
     * NullableCvoid get_from_map(const struct CStringMap *map, struct KernelStringSlice key, AllocateStringFn allocate_fn)
     * }
     */
    public static MemorySegment get_from_map(MemorySegment map, MemorySegment key, MemorySegment allocate_fn) {
        var mh$ = get_from_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_from_map", map, key, allocate_fn);
            }
            return (MemorySegment)mh$.invokeExact(map, key, allocate_fn);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class selection_vector_from_dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultKernelBoolSlice.layout(),
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("selection_vector_from_dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultKernelBoolSlice selection_vector_from_dv(const struct DvInfo *dv_info, HandleSharedExternEngine engine, HandleSharedGlobalScanState state)
     * }
     */
    public static FunctionDescriptor selection_vector_from_dv$descriptor() {
        return selection_vector_from_dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultKernelBoolSlice selection_vector_from_dv(const struct DvInfo *dv_info, HandleSharedExternEngine engine, HandleSharedGlobalScanState state)
     * }
     */
    public static MethodHandle selection_vector_from_dv$handle() {
        return selection_vector_from_dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultKernelBoolSlice selection_vector_from_dv(const struct DvInfo *dv_info, HandleSharedExternEngine engine, HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment selection_vector_from_dv$address() {
        return selection_vector_from_dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultKernelBoolSlice selection_vector_from_dv(const struct DvInfo *dv_info, HandleSharedExternEngine engine, HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment selection_vector_from_dv(SegmentAllocator allocator, MemorySegment dv_info, MemorySegment engine, MemorySegment state) {
        var mh$ = selection_vector_from_dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("selection_vector_from_dv", allocator, dv_info, engine, state);
            }
            return (MemorySegment)mh$.invokeExact(allocator, dv_info, engine, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class row_indexes_from_dv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ExternResultKernelRowIndexArray.layout(),
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("row_indexes_from_dv");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * struct ExternResultKernelRowIndexArray row_indexes_from_dv(const struct DvInfo *dv_info, HandleSharedExternEngine engine, HandleSharedGlobalScanState state)
     * }
     */
    public static FunctionDescriptor row_indexes_from_dv$descriptor() {
        return row_indexes_from_dv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * struct ExternResultKernelRowIndexArray row_indexes_from_dv(const struct DvInfo *dv_info, HandleSharedExternEngine engine, HandleSharedGlobalScanState state)
     * }
     */
    public static MethodHandle row_indexes_from_dv$handle() {
        return row_indexes_from_dv.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * struct ExternResultKernelRowIndexArray row_indexes_from_dv(const struct DvInfo *dv_info, HandleSharedExternEngine engine, HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment row_indexes_from_dv$address() {
        return row_indexes_from_dv.ADDR;
    }

    /**
     * {@snippet lang=c :
     * struct ExternResultKernelRowIndexArray row_indexes_from_dv(const struct DvInfo *dv_info, HandleSharedExternEngine engine, HandleSharedGlobalScanState state)
     * }
     */
    public static MemorySegment row_indexes_from_dv(SegmentAllocator allocator, MemorySegment dv_info, MemorySegment engine, MemorySegment state) {
        var mh$ = row_indexes_from_dv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("row_indexes_from_dv", allocator, dv_info, engine, state);
            }
            return (MemorySegment)mh$.invokeExact(allocator, dv_info, engine, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_scan_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            delta_kernel_ffi_h.C_POINTER,
            KernelBoolSlice.layout(),
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_scan_data");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void visit_scan_data(HandleExclusiveEngineData data, struct KernelBoolSlice selection_vec, const struct CTransforms *transforms, NullableCvoid engine_context, CScanCallback callback)
     * }
     */
    public static FunctionDescriptor visit_scan_data$descriptor() {
        return visit_scan_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void visit_scan_data(HandleExclusiveEngineData data, struct KernelBoolSlice selection_vec, const struct CTransforms *transforms, NullableCvoid engine_context, CScanCallback callback)
     * }
     */
    public static MethodHandle visit_scan_data$handle() {
        return visit_scan_data.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void visit_scan_data(HandleExclusiveEngineData data, struct KernelBoolSlice selection_vec, const struct CTransforms *transforms, NullableCvoid engine_context, CScanCallback callback)
     * }
     */
    public static MemorySegment visit_scan_data$address() {
        return visit_scan_data.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void visit_scan_data(HandleExclusiveEngineData data, struct KernelBoolSlice selection_vec, const struct CTransforms *transforms, NullableCvoid engine_context, CScanCallback callback)
     * }
     */
    public static void visit_scan_data(MemorySegment data, MemorySegment selection_vec, MemorySegment transforms, MemorySegment engine_context, MemorySegment callback) {
        var mh$ = visit_scan_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_scan_data", data, selection_vec, transforms, engine_context, callback);
            }
            mh$.invokeExact(data, selection_vec, transforms, engine_context, callback);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class visit_schema {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_LONG,
            delta_kernel_ffi_h.C_POINTER,
            delta_kernel_ffi_h.C_POINTER
        );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("visit_schema");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uintptr_t visit_schema(HandleSharedSnapshot snapshot, struct EngineSchemaVisitor *visitor)
     * }
     */
    public static FunctionDescriptor visit_schema$descriptor() {
        return visit_schema.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uintptr_t visit_schema(HandleSharedSnapshot snapshot, struct EngineSchemaVisitor *visitor)
     * }
     */
    public static MethodHandle visit_schema$handle() {
        return visit_schema.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uintptr_t visit_schema(HandleSharedSnapshot snapshot, struct EngineSchemaVisitor *visitor)
     * }
     */
    public static MemorySegment visit_schema$address() {
        return visit_schema.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uintptr_t visit_schema(HandleSharedSnapshot snapshot, struct EngineSchemaVisitor *visitor)
     * }
     */
    public static long visit_schema(MemorySegment snapshot, MemorySegment visitor) {
        var mh$ = visit_schema.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("visit_schema", snapshot, visitor);
            }
            return (long)mh$.invokeExact(snapshot, visitor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class get_testing_kernel_expression {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            delta_kernel_ffi_h.C_POINTER    );

        public static final MemorySegment ADDR = delta_kernel_ffi_h.findOrThrow("get_testing_kernel_expression");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * HandleSharedExpression get_testing_kernel_expression()
     * }
     */
    public static FunctionDescriptor get_testing_kernel_expression$descriptor() {
        return get_testing_kernel_expression.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * HandleSharedExpression get_testing_kernel_expression()
     * }
     */
    public static MethodHandle get_testing_kernel_expression$handle() {
        return get_testing_kernel_expression.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * HandleSharedExpression get_testing_kernel_expression()
     * }
     */
    public static MemorySegment get_testing_kernel_expression$address() {
        return get_testing_kernel_expression.ADDR;
    }

    /**
     * {@snippet lang=c :
     * HandleSharedExpression get_testing_kernel_expression()
     * }
     */
    public static MemorySegment get_testing_kernel_expression() {
        var mh$ = get_testing_kernel_expression.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("get_testing_kernel_expression");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

